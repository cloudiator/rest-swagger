#
# Documentation of the Cloudiator REST Api
#
swagger: '2.0'

# Document Metadata
info:
  version: "0.2.0"
  title: Cloudiator REST Api
  contact:
    name: Daniel Baur
    email: daniel.baur@uni-ulm.de
    url: http://cloudiator.org
  license:
    name: Apache License 2.0
    url: https://raw.githubusercontent.com/cloudiator/rest/master/LICENSE
schemes:
  - http
consumes:
  - application/json
produces:
  - application/json


host: localhost:9000

# Parameters
parameters:
  id:
    name: id
    in: path
    description: Unique identifier of the resource
    required: true
    type: string

# Definitions
definitions:

  CloudType:
    type: string
    description: type of the cloud
    enum: ['PRIVATE','PUBLIC']

  Error:
    required:
      - code
      - message
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
        
  Cloud:
    description: |
      Representation of a cloud used by Cloudiator
    type: object
    required:
      - id
    allOf: 
    - $ref: '#/definitions/NewCloud'
    - properties:
        id:
          example: "1a79a4d60de6718e8e5b326e338ae533"
          type: string
          description: Unique identifier for the cloud
          
  Api:
    description: |
      Represents an API used by a cloud
    type: object
    required:
      - providerName
    properties:
      providerName:
        type: string
        description: Name of the API provider, maps to a driver
        example: "openstack-nova"
  
  CloudCredential:
    description: |
      Represents the credentials used to authenticate with a cloud
    type: object
    required:
      - user
      - secret
    properties:
      user:
        type: string
        description: Username for authentication at the cloud provider's API
        minLength: 1
        example: "tenant:username"
      secret:
        type: string
        description: Secret (e.g. Password) for authentication at the cloud provider's API
        minLength: 1
        example: "MySuperSecurePassword"
        
  CloudConfiguration:
    description: |
      Repesents the configuration of a cloud.
    type: object
    properties:
      nodeGroup:
        type: string
        description: A prefix all Cloudiator managed entities will belong to.
        example: "cloudiator"
      properties:
        type: array
        description: Array of configuration properties.
        items:
          $ref: '#/definitions/Property'
        
  Property:
    type: object
    description: "A key-value pair"
    required:
      - key
      - value
    properties:
      key:
        type: string
        description: "Key of the property"
        example: "sword.regions"
      value:
        type: string
        description: "Value of the property"
        example: "RegionOne, RegionTwo"
      
  NewCloud:
    description: |
      Represents a new cloud that is to be created
    type: object
    required:
      - api 
      - credential
      - cloudType
    properties:
      endpoint:
        type: string
        description: "URI where the api of this cloud provider can be accessed."
        example: "https://endpoint.example.com"
      cloudType:
        $ref: '#/definitions/CloudType'
      api:
        $ref: '#/definitions/Api'
      credential:
        $ref: '#/definitions/CloudCredential'
      cloudConfiguration:
        $ref: '#/definitions/CloudConfiguration'
        
  Image:
    description:  |
      Represents an image offer by a cloud
    type: object
    required:
      - id
      - name
      - providerId
      - operatingSystem
    properties:
      id:
        type: string
        description: "Unique identifier for this image"
        example: "1a79a4d60de6718e8e5b326e338ae533/RegionOne/1"
      name:
        type: string
        description: "Human-readable name"
        example: "Ubuntu 16.04 LTS AMD 64"
      providerId:
        type: string
        description: "Original id issued by provider"
        example: "1"
      operatingSystem:
        $ref: '#/definitions/OperatingSystem'
        
  OperatingSystem:
    description: |
      Represents the operating system of an image
    type: object 
    properties:
      operatingSystemFamily:
        $ref: '#/definitions/OperatingSystemFamily'
      operatingSystemArchitecture:
        $ref: '#/definitions/OperatingSystemArchitecture'
      operatingSystemVersion:
        type: string
        description: "Version of the OS"

  OperatingSystemFamily:
    description: "Type of OS Family"
    type: object
    properties:
      operatingSystemType:
        $ref: '#/definitions/OperatingSystemType'
      operatingSystemVersionFormat:
        type: string
      loginNameSupplier:
        type: string
        description: "Login Name"
        example: "ubuntu"
      downloadUrlFormat:
        type: string
        description: "DownloadUrl"

  OperatingSystemType:
    description: "OS Type"
    type: string
    enum: ['UNKOWN','UNIX','LINUX','WINDOWS','BSD','MAC']
    example: "LINUX"

  OperatingSystemArchitecture:
    description: "Type of OS Architecture"
    type: string
    enum: ['UNKOWN','AMD64','I386']
    example: "AMD64"

  
  Hardware:
    description: |
      Represents a hardware offer by a cloud
    type: object
    required:
      - id
      - name
      - providerId
      - cores
      - ram
    properties:
      id:
        description: "Unique identifier for the hardware"
        type: string
        example: "1a79a4d60de6718e8e5b326e338ae533/RegionOne/1"
      name:
        description: "Human-readable name for the hardware"
        type: string
        example: "m1.medium"
      providerId:
        description: "Original id issued by the provider"
        type: string
        example: "1"
      cores:
        description: "Number of cores"
        type: integer
        format: int32
        example: 4
      ram:
        description: "Amount of RAM"
        type: integer
        format: int64
        example: 2048
      disk:
        description: "Amount of disk space"
        type: number
        format: float
        example: 100
      location:
        $ref: '#/definitions/Location'
    
  Location:
    description: |
      Repesents a (virtual) location offers by a cloud
    type: object
    required:
      - id
      - name
      - providerId
      - locationScope
      - isAssignable
    properties:
      id:
        description: "Unique identifier"
        type: string
        example: "1a79a4d60de6718e8e5b326e338ae533/RegionOne"
      name:
        description: "Human-readable name"
        type: string
        example: "RegionOne"
      providerId:
        description: "Original id issued by the provider"
        type: string
        example: "RegionOne"
      locationScope:
        description: "Scope of the location"
        type: string
        enum: ['PROVIDER', 'REGION', 'ZONE', 'HOST']
        example: 'ZONE'
      isAssignable:
        description: "True of the location can be used to start virtual machines, false if not"
        type: boolean
        example: true
      parent:
        # self reference is broken in editor and UI
        # see https://github.com/swagger-api/swagger-editor/issues/1005
        $ref: '#/definitions/Location'
        
  # Platform related definitions:
    
  Platform:
    description: Representation of a platform used by Cloudiator
    type: object
    required:
      - id
    allOf: 
      - $ref: '#/definitions/NewPlatform'
      - properties:
          id:
            type: string
            description: Unique identifier for the platform
        
  NewPlatform:
    description: |
      Repesents a new PaaS provider to be created
    type: object
    required:
      - id
      - name
      - api
      - credential
    properties:
      id:
        description: "Unique identifier"
        type: string
      name:
        description: "Human-readable name"
        type: string
      type:
        description: "PaaS stack type"
        type: string
        enum: ['HEROKU', 'OPENSHIFT', 'CLOUDFOUNDRY']  
      api:
        $ref: '#/definitions/Api'
      credential:
        $ref: '#/definitions/CloudCredential'
        
  PlatformEnvironment:
    description: |
      Repesents a PaaS environemnt to run an component
    type: object
    required:
      - id
      - name
      - platformHardware
      - platformRuntime
    properties:
      id:
        description: "Unique identifier"
        type: string
      name:
        description: "Human-readable name"
        type: string
      platformHardware:
        $ref: '#/definitions/PlatformHardware'
      platformRuntime:
        $ref: '#/definitions/PlatformRuntime'
        
        
  PlatformHardware:
    description: |  
      Represents a hardware configuration for a Platform (not all attributes might be supported for all PaaS providers)
    type: object
    required:
      - id
      - name
      - cores
      - ram
      - disk
    properties:
      id:
        description: "Unique identifier for the hardware"
        type: string
      name:
        description: "Human-readable name for the hardware"
        type: string
      cores:
        description: "Number of cores"
        type: integer
        format: int32
      ram:
        description: "Amount of RAM"
        type: integer
        format: int64
      disk:
        description: "Amount of disk space"
        type: number
        format: double
      
        
  PlatformRuntime:
    description: "Represents a runtime for a Platform component, e.g. Java, PHP, Tomcat" 
    type: object
    required:
      - id
      - language
      - runtimeType
      - version
    properties:
      id:
        description: "Unique identifier for the hardware"
        type: string
      language:
        description: "the specific runtime language"
        type: string
      runtimeType:
        description: "specifies the runtime type"
        type: string
        enum:
          - runtime
          - server
      version:
        description: "the version of the specified type"
        type: number
        format: double

  PlatformService:
    description: |
      Repesents additional PaaS services to component, e.g. a database, TODO!
    type: object
    required:
      - id
      - name
    properties:
      id:
        description: "Unique identifier"
        type: string
      name:
        description: "Human-readable name"
        type: string
      
  Component:
    description: |
      Represents a component of an application.
    type: object
    discriminator: type
    required:
      - name
      - type
    properties:
      type:
        description: |
          Discriminator for polymorphism.
        type: string
      name:
        description: "Human-readable name. Uniquely identifies a component."
        type: string
      ports:
        type: array
        items:
          $ref: '#/definitions/Port'
  
  DockerComponent:
    description: |
      Represents a docker container
    type: object
    required:
      - dockerImage
    allOf:
      - $ref: '#/definitions/Component'
      - properties:
          dockerImage:
            description: |
              Name of the docker image
            type: string
            
            
  PlatformComponent:
    description: |
      Represents a PaaS component
    type: object
    required:
      - sourceRepository
    allOf:
      - $ref: '#/definitions/Component'
      - properties:
          sourceRepository:
            description: |
              url to the source code repository (currently only git is supported)
            type: string
        
  LanceComponent:
    description: |
      Represents a lance component.
    type: object
    required:
      - start
    allOf:
      - $ref: '#/definitions/Component'
      - properties:
          init:
            description: | 
              Initialization action.
            type: string
          preInstall:
            description: |
              Executed before installation action. Can be e.g. used for downloading binaries.
            type: string
          install:
            description: |
              Used for installing the application.
            type: string
          postInstall:
            description: |
              Used for configuration of the application component. First action where Lance environment variables are set.
            type: string
          preStart:
            description: |
              Called before starting the application. Can be e.g. used for configuration an environment.
            type: string
          start:
            description: |
              Starts the component. Needs to return for PlainContainer and not return for Docker.
            type: string
          startDetection:
            description: |
              Detects the start of the application. Required if the application does not start instantianous.
            type: string
          stopDetection:
            description: |
              Checks if the application has stopped. Is periodically checked to detect a crash of the application.
            type: string
          postStart:
            description: |
              Executed after the application has successfully started.
            type: string
          preStop:
            description: |
              Called before the application is stopped.
            type: string
          stop:
            description: |
              Stops the application.
            type: string
          postStop:
            description: |
              Executed after the application is successfully stopped.
            type: string
          shutdown:
            description: |
              Executed before the container is shutdown. Can be used to backup state.
            type: string
    example:
      name: haproxy
      preInstall: |
        sudo apt-get -y update && sudo apt-get -y install git &&
        git clone https://github.com/dbaur/mediawiki-tutorial.git
      install: "./mediawiki-tutorial/scripts/lance/haproxy.sh install"
      start: "./mediawiki-tutorial/scripts/lance/haproxy.sh startBlocking"

        
  Application:
    description: |
      Represents an application. An application is a logical group of components.
    type: object
    required:
      - name
      - components
      - communications
    properties:
      name:
        type: string
      components:
        type: array
        items:
          type: string
        description: |
          An array of components (referenced by names) that form this application.
        example:
      communications:
        type: array
        items:
          $ref: '#/definitions/Communication'
    example:
      name: "MediaWiki Application"
      components:
        - "HaProxy"
        - "MediaWiki"
        - "MariaDB"

  Port:
    type: object
    discriminator: type
    description: |
      Represents a communication port of a component
    required:
      - name
    properties:
      type:
        description: |
          Discriminator for polymorphism.
        type: string
      name:
        type: string
        description: |
          Uniquely identifies a port. Defines the name of the environment variables holding
          IP addresses of remote components.
        example: "LOADBALANCERREQWIKI"

  PortProvided:
    type: object
    description: |
      Represents a communication port that the component provides for other components
      or the end user.
    allOf:
      - $ref: '#/definitions/Port'
      - properties:
          port:
            type: integer
            format: int32
            example: 80

  PortRequired:
    type: object
    description: |
      Represents a communication port that the component requires from other (downstream) components.
    allOf:
      - $ref: '#/definitions/Port'
      - properties:
          updateAction:
            type: string
            description: |
              A script that is executed if a new instance of a downstream component is available.
            example: "./mediawiki-tutorial/scripts/lance/haproxy.sh configure"
          isMandatory:
            type: boolean
            description: |
              States if an instance of a downstream components needs to be already started (true), or
              if the component can start without a downstream component (false).
            example: true

  Communication:
    description: |
      Represents a communication requirement between two components by mapping a required port of a
      component to a provided port of another component.
    properties:
      portRequired:
        type: string
        description: |
          The name of the required port this communication refers to.
      portProvided:
        type: string
        description: |
          The name of the provided port this communication refers to.
        
  VirtualMachine:
    type: object
    properties:
      image:
        $ref: '#/definitions/Image'
      hardware:
        $ref: '#/definitions/Hardware'
      location:
        $ref: '#/definitions/Location'

  VirtualMachineRequest:
      type: object
      description: |
        Represents a request to create a new virtual machine.
      properties:
        image:
          type: string
        hardware:
          type: string
        location:
          type: string

  #Task replaces VirtualMachineRequest
      
  Task:
    description: |
      Represents a long-running task within the system
    type: object
    properties:
      id:
        type: string
        description: "Unique identifier for the task"
      taskType:
        $ref: '#/definitions/TaskType'
      taskStatus:
        $ref: '#/definitions/TaskStatus'
      virtualMachineSpecification:
        $ref: '#/definitions/VirtualMachine'
      relatedTask:
        # Relation between VMR and VM, if VMR completed
        $ref: '#/definitions/Task'

  TaskType:
    description: "The type of this task"
    type: string
    enum: ['VirtualMachine','VirtualMachineRequest']

  TaskStatus:
    description: "The status of the running task"
    type: string
    enum: ['SCHEDULED','RUNNING','COMPLETED','FAILED']


        
responses:
  400BadRequestResponse:
    description: Bad Request
    schema:
      $ref: '#/definitions/Error'
  401UnauthorizedResponse:
    description: Authorization for this action is missing
    schema:
      $ref: '#/definitions/Error'
  403ForbiddenResponse:
    description: Forbidden action
    schema:
      $ref: '#/definitions/Error'
  404NotFoundResponse:
    description: Item not found
    schema:
      $ref: '#/definitions/Error'
  500ErrorResponse:
    description: An unexpected Error occured
    schema:
      $ref: '#/definitions/Error'
  504GatewayTimeout:
    description: Server temporary not available
    schema:
      $ref: '#/definitions/Error'

  
# Paths
paths:

  # Cloud related paths:
  /clouds:
    get:
      consumes: []
      operationId: findClouds
      tags:
        - cloud
      description: |
          Returns all clouds from the system that the user has access to
      responses:
        200:
          description: |
            All clouds
          schema:
            type: array
            items: 
              $ref: '#/definitions/Cloud'
        401:
          $ref: '#/responses/401UnauthorizedResponse'
        403:
          $ref: '#/responses/403ForbiddenResponse'
        500:
          $ref: '#/responses/500ErrorResponse'
        504:
          $ref: '#/responses/504GatewayTimeout'
    post:
      operationId: addCloud
      tags:
        - cloud
      description: Creates a new cloud.
      parameters:
        - name: cloud
          in: body
          description: Cloud to add
          required: true
          schema:
            $ref: '#/definitions/NewCloud'
      responses:
        201:
          description: "Created"
          schema:
            $ref: "#/definitions/Cloud"
        400:
          $ref: '#/responses/400BadRequestResponse'
        401:
          $ref: '#/responses/401UnauthorizedResponse'
        403:
          $ref: '#/responses/403ForbiddenResponse'
        404:
          $ref: '#/responses/404NotFoundResponse'
        500:
          $ref: '#/responses/500ErrorResponse'
        504:
          description: 'Service temporary unavailable'
          schema:
            $ref: '#/definitions/Error'

    
  /clouds/{id}:
    get:
      consumes: []
      operationId: findCloud
      tags:
        - cloud
      description: |
        Returns the cloud identified by the given id parameter
      parameters:
        - $ref: '#/parameters/id'
      responses:
        200:
         description: |
          The cloud identified by the id
         schema:
          $ref: '#/definitions/Cloud'
        401:
          $ref: '#/responses/401UnauthorizedResponse'
        403:
          $ref: '#/responses/403ForbiddenResponse'
        500:
          $ref: '#/responses/500ErrorResponse'
        504:
          $ref: '#/responses/504GatewayTimeout'
    delete:
      consumes: []
      operationId: deleteCloud
      tags:
        - cloud
      description: |
        Deletes the cloud identified by the given id paramater.
      parameters:
        - $ref: '#/parameters/id'
      responses:
        200:
          description: "OK"
        400:
          $ref: '#/responses/400BadRequestResponse'
        401:
          $ref: '#/responses/401UnauthorizedResponse'
        403:
          $ref: '#/responses/403ForbiddenResponse'
        404:
          $ref: '#/responses/404NotFoundResponse'
        500:
          $ref: '#/responses/500ErrorResponse'
        504:
          $ref: '#/responses/504GatewayTimeout'
  
  # Image related paths
  /images:
    get:
      consumes: []
      operationId: findImages
      tags:
        - cloud
      description: |
        Returns all images visable to the user
      responses:
        200:
          description: |
            All images
          schema:
            type: array
            items:
              $ref: '#/definitions/Image'
        401:
          $ref: '#/responses/401UnauthorizedResponse'
        403:
          $ref: '#/responses/403ForbiddenResponse'
        500:
          $ref: '#/responses/500ErrorResponse'
        504:
          $ref: '#/responses/504GatewayTimeout'
              
  /images/{id}:
    put:
      tags:
        - cloud
      operationId: editImage
      description: |
        Updates a specific image
      parameters:
        - $ref: '#/parameters/id'
        - name: image
          in: body
          description: |
            Image to update
          required: true
          schema:
            $ref: '#/definitions/Image'
      responses:
        200:
          description: |
            OK
          schema:
            $ref: '#/definitions/Image'
        400:
          $ref: '#/responses/400BadRequestResponse'
        401:
          $ref: '#/responses/401UnauthorizedResponse'
        403:
          $ref: '#/responses/403ForbiddenResponse'
        404:
          $ref: '#/responses/404NotFoundResponse'
        500:
          $ref: '#/responses/500ErrorResponse'
        504:
          $ref: '#/responses/504GatewayTimeout'

  # Hardware related paths
  /hardware:
    get:
      consumes: []
      operationId: findHardware
      tags:
        - cloud
      description: |
        Returns all hardware visible to the user
      responses:
        200:
          description: |
            OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Hardware'
        401:
          $ref: '#/responses/401UnauthorizedResponse'
        403:
          $ref: '#/responses/403ForbiddenResponse'
        500:
          $ref: '#/responses/500ErrorResponse'
        504:
          $ref: '#/responses/504GatewayTimeout'
    
  # Location related paths
  /locations:
    get:
      consumes: []
      operationId: findLocations
      tags:
        - cloud
      description: |
        Returns all locations visible to the user
      responses:
        200:
          description: |
            OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Location'
        401:
          $ref: '#/responses/401UnauthorizedResponse'
        403:
          $ref: '#/responses/403ForbiddenResponse'
        500:
          $ref: '#/responses/500ErrorResponse'
        504:
          $ref: '#/responses/504GatewayTimeout'

  # Application related paths

  /applications:
    get:
      consumes: []
      operationId: findApplications
      tags:
        - application
      description: |
        Returns all applications visible to the user
      responses:
        200:
          description: |
            OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Application'
        401:
          $ref: '#/responses/401UnauthorizedResponse'
        403:
          $ref: '#/responses/403ForbiddenResponse'
        500:
          $ref: '#/responses/500ErrorResponse'
        504:
          $ref: '#/responses/504GatewayTimeout'
    post:
      operationId: addApplication
      tags:
        - application
      description:
        Creates a new application
      parameters:
        - name: application
          in: body
          description: |
            Application to be created.
          required: true
          schema:
            $ref: '#/definitions/Application'
      responses:
        200:
          description: |
            OK
          schema:
            $ref: '#/definitions/Application'
        400:
          $ref: '#/responses/400BadRequestResponse'
        401:
          $ref: '#/responses/401UnauthorizedResponse'
        403:
          $ref: '#/responses/403ForbiddenResponse'
        404:
          $ref: '#/responses/404NotFoundResponse'
        500:
          $ref: '#/responses/500ErrorResponse'
        504:
          $ref: '#/responses/504GatewayTimeout'
  
  # Component related paths
  /components:
    get:
      consumes: []
      operationId: findComponents
      tags:
        - application
      description: | 
        Returns all components visible to the user
      responses:
        200:
          description: |
            OK
          schema:
            type: array
            items: 
              $ref: '#/definitions/Component'
        401:
          $ref: '#/responses/401UnauthorizedResponse'
        403:
          $ref: '#/responses/403ForbiddenResponse'
        500:
          $ref: '#/responses/500ErrorResponse'
        504:
          $ref: '#/responses/504GatewayTimeout'
    post:
      operationId: addComponent
      tags:
        - application
      description: |
        Creates a new component
      parameters:
        - name: component
          in: body
          description: |
            Component to be created
          required: true
          schema:
            $ref: '#/definitions/Component'
      responses:
        200:
          description: |
            OK
          schema:
            $ref: '#/definitions/Component'
        400:
          $ref: '#/responses/400BadRequestResponse'
        401:
          $ref: '#/responses/401UnauthorizedResponse'
        403:
          $ref: '#/responses/403ForbiddenResponse'
        404:
          $ref: '#/responses/404NotFoundResponse'
        500:
          $ref: '#/responses/500ErrorResponse'
        504:
          $ref: '#/responses/504GatewayTimeout'
            
  # Task related paths
  /tasks:
    get:
      consumes: []
      operationId: findTasks
      tags:
        - task
      description: |
        Returns all running tasks visible to the user
      responses:
        200:
          description: 'OK'
          schema:
            type: array
            items:
              $ref: '#/definitions/Task'
        401:
          $ref: '#/responses/401UnauthorizedResponse'
        403:
          $ref: '#/responses/403ForbiddenResponse'
        500:
          $ref: '#/responses/500ErrorResponse'
        504:
          $ref: '#/responses/504GatewayTimeout'
              
  /tasks/{id}:
    get:
      consumes: []
      operationId: findTask
      tags:
        - task
      description: |
        Returns the task identified by the id parameter.
      parameters:
        - $ref: '#/parameters/id'
      responses:
        200:
          description: 'OK'
          schema:
            $ref: '#/definitions/Task'
        401:
          $ref: '#/responses/401UnauthorizedResponse'
        403:
          $ref: '#/responses/403ForbiddenResponse'
        500:
          $ref: '#/responses/500ErrorResponse'
        504:
          $ref: '#/responses/504GatewayTimeout'
        
  # Virtual machine related tasks
  /vm:
    post:
      operationId: addVM
      tags:
        - cloud
      description: 'Creates a new virtual machine request'
      parameters:
        - name: virtualMachineRequest
          in: body
          description: 'VirtualMachine Request'
          required: true
          schema:
            $ref: '#/definitions/VirtualMachineRequest'
      responses:
        202:
          description: ACCEPTED
          schema:
            $ref: '#/definitions/Task'
        400:
          $ref: '#/responses/400BadRequestResponse'
        401:
          $ref: '#/responses/401UnauthorizedResponse'
        403:
          $ref: '#/responses/403ForbiddenResponse'
        404:
          $ref: '#/responses/404NotFoundResponse'
        500:
          $ref: '#/responses/500ErrorResponse'
        504:
          $ref: '#/responses/504GatewayTimeout'
      
  # Platform related paths:
  
  # Platform paths:
  /platform:
    get:
      consumes: []
      operationId: findPlatforms
      tags:
        - platform
      description: |
          Returns all platform from the system that the user has access to
      responses:
        200:
          description: |
            All platforms
          schema:
            type: array
            items: 
              $ref: '#/definitions/Platform'
        401:
          $ref: '#/responses/401UnauthorizedResponse'
        403:
          $ref: '#/responses/403ForbiddenResponse'
        500:
          $ref: '#/responses/500ErrorResponse'
        504:
          $ref: '#/responses/504GatewayTimeout'
    post:
      operationId: addPlatform
      tags:
        - platform
      description: Creates a new platform.
      parameters:
        - name: platform
          in: body
          description: Platform to add
          required: true
          schema:
            $ref: '#/definitions/NewPlatform'
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Platform"
        400:
          $ref: '#/responses/400BadRequestResponse'
        401:
          $ref: '#/responses/401UnauthorizedResponse'
        403:
          $ref: '#/responses/403ForbiddenResponse'
        404:
          $ref: '#/responses/404NotFoundResponse'
        500:
          $ref: '#/responses/500ErrorResponse'
        504:
          $ref: '#/responses/504GatewayTimeout'
    
  /platform/{id}:
    get:
      consumes: []
      operationId: findPlatform
      tags:
        - platform
      description: |
        Returns the platform identified by the given id parameter
      parameters:
        - $ref: '#/parameters/id'
      responses:
        200:
         description: |
          The platform identified by the id
         schema:
          $ref: '#/definitions/Platform'
        401:
          $ref: '#/responses/401UnauthorizedResponse'
        403:
          $ref: '#/responses/403ForbiddenResponse'
        500:
          $ref: '#/responses/500ErrorResponse'
        504:
          $ref: '#/responses/504GatewayTimeout'
    delete:
      operationId: deletePlatform
      tags:
        - platform
      description: |
        Deletes the platform identified by the given id paramater.
      parameters:
        - $ref: '#/parameters/id'
      responses:
        200:
          description: "OK"
        400:
          $ref: '#/responses/400BadRequestResponse'
        401:
          $ref: '#/responses/401UnauthorizedResponse'
        403:
          $ref: '#/responses/403ForbiddenResponse'
        404:
          $ref: '#/responses/404NotFoundResponse'
        500:
          $ref: '#/responses/500ErrorResponse'
        504:
          $ref: '#/responses/504GatewayTimeout'
  
  # PlatformHardware related paths
  /platformHardware:
    get:
      consumes: []
      operationId: findPlatformHardwares
      tags:
        - platform
      description: |
        Returns all platform hardware visible to the user
      responses:
        200:
          description: |
            OK
          schema:
            type: array
            items:
              $ref: '#/definitions/PlatformHardware'
        401:
          $ref: '#/responses/401UnauthorizedResponse'
        403:
          $ref: '#/responses/403ForbiddenResponse'
        500:
          $ref: '#/responses/500ErrorResponse'
        504:
          $ref: '#/responses/504GatewayTimeout'
    
    post:
      operationId: addPlatformHardware
      tags:
        - platform
      description: |
        Creates a new PlatformHardware
      parameters:
        - name: platformHardware
          in: body
          description: |
            PlatformHardware to be created
          required: true
          schema:
            $ref: '#/definitions/PlatformHardware'
      responses:
        200:
          description: |
            OK
          schema:
            $ref: '#/definitions/PlatformHardware'
        400:
          $ref: '#/responses/400BadRequestResponse'
        401:
          $ref: '#/responses/401UnauthorizedResponse'
        403:
          $ref: '#/responses/403ForbiddenResponse'
        404:
          $ref: '#/responses/404NotFoundResponse'
        500:
          $ref: '#/responses/500ErrorResponse'
        504:
          $ref: '#/responses/504GatewayTimeout'
  
  /platformHardware/{id}:
    get:
      consumes: []
      operationId: findPlatformHardware
      tags:
        - platform
      description: |
        Returns the PlatformHardware identified by the id parameter.
      parameters:
        - $ref: '#/parameters/id'
      responses:
        200:
          description: 'OK'
          schema:
            $ref: '#/definitions/PlatformHardware'
        401:
          $ref: '#/responses/401UnauthorizedResponse'
        403:
          $ref: '#/responses/403ForbiddenResponse'
        500:
          $ref: '#/responses/500ErrorResponse'
        504:
          $ref: '#/responses/504GatewayTimeout'
  
  # PlatformEnvironment related paths
  /platformEnvironment:
    get:
      consumes: []
      operationId: findPlatformEnvironments
      tags:
        - platform
      description: |
        Returns all platform environment  visible to the user
      responses:
        200:
          description: |
            OK
          schema:
            type: array
            items:
              $ref: '#/definitions/PlatformEnvironment'
        401:
          $ref: '#/responses/401UnauthorizedResponse'
        403:
          $ref: '#/responses/403ForbiddenResponse'
        500:
          $ref: '#/responses/500ErrorResponse'
        504:
          $ref: '#/responses/504GatewayTimeout'
    post:
      operationId: addPlatformEnvironment
      tags:
        - platform
      description: |
        Creates a new PlatformEnvironment
      parameters:
        - name: platformEnvironment
          in: body
          description: |
            PlatformEnvironment to be created
          required: true
          schema:
            $ref: '#/definitions/PlatformEnvironment'
      responses:
        200:
          description: |
            OK
          schema:
            $ref: '#/definitions/PlatformEnvironment'
        400:
          $ref: '#/responses/400BadRequestResponse'
        401:
          $ref: '#/responses/401UnauthorizedResponse'
        403:
          $ref: '#/responses/403ForbiddenResponse'
        404:
          $ref: '#/responses/404NotFoundResponse'
        500:
          $ref: '#/responses/500ErrorResponse'
        504:
          $ref: '#/responses/504GatewayTimeout'
  
  /platformEnvironment/{id}:
    get:
      consumes: []
      operationId: findPlatformEnvironment
      tags:
        - platform
      description: |
        Returns the PlatformEnvironment identified by the id parameter.
      parameters:
        - $ref: '#/parameters/id'
      responses:
        200:
          description: 'OK'
          schema:
            $ref: '#/definitions/PlatformEnvironment'
        401:
          $ref: '#/responses/401UnauthorizedResponse'
        403:
          $ref: '#/responses/403ForbiddenResponse'
        500:
          $ref: '#/responses/500ErrorResponse'
        504:
          $ref: '#/responses/504GatewayTimeout'
  
  # PlatformRuntime related paths
  /platformRuntime:
    get:
      consumes: []
      operationId: findPlatformRuntimes
      tags:
        - platform
      description: |
        Returns all platform runtime  visible to the user
      responses:
        200:
          description: |
            OK
          schema:
            type: array
            items:
              $ref: '#/definitions/PlatformRuntime'
        401:
          $ref: '#/responses/401UnauthorizedResponse'
        403:
          $ref: '#/responses/403ForbiddenResponse'
        500:
          $ref: '#/responses/500ErrorResponse'
        504:
          $ref: '#/responses/504GatewayTimeout'
    
    post:
      operationId: addPlatformRuntime
      tags:
        - platform
      description: |
        Creates a new PlatformRuntime
      parameters:
        - name: platformRuntime
          in: body
          description: |
            PlatformRuntime to be created
          required: true
          schema:
            $ref: '#/definitions/PlatformRuntime'
      responses:
        200:
          description: |
            OK
          schema:
            $ref: '#/definitions/PlatformRuntime'
        400:
          $ref: '#/responses/400BadRequestResponse'
        401:
          $ref: '#/responses/401UnauthorizedResponse'
        403:
          $ref: '#/responses/403ForbiddenResponse'
        404:
          $ref: '#/responses/404NotFoundResponse'
        500:
          $ref: '#/responses/500ErrorResponse'
        504:
          $ref: '#/responses/504GatewayTimeout'
  
  /platformRuntime/{id}:
    get:
      consumes: []
      operationId: findPlatformRuntime
      tags:
        - platform
      description: |
        Returns the PlatformRuntime identified by the id parameter.
      parameters:
        - $ref: '#/parameters/id'
      responses:
        200:
          description: 'OK'
          schema:
            $ref: '#/definitions/PlatformRuntime'
        401:
          $ref: '#/responses/401UnauthorizedResponse'
        403:
          $ref: '#/responses/403ForbiddenResponse'
        500:
          $ref: '#/responses/500ErrorResponse'
        504:
          $ref: '#/responses/504GatewayTimeout'
          
