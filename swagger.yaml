#
# Documentation of the Cloudiator REST Api
#
swagger: '2.0'

# Document Metadata
info:
  version: "0.2.0"
  title: Cloudiator REST Api
  contact:
    name: Daniel Baur
    email: daniel.baur@uni-ulm.de
    url: cloudiator.org
  license:
    name: Apache License 2.0
    url: https://raw.githubusercontent.com/cloudiator/rest/master/LICENSE
schemes:
  - http
consumes:
  - application/json
produces:
  - application/json


host: localhost:9000

# Parameters
parameters:
  id:
    name: id
    in: path
    description: Unique identifier of the resource
    required: true
    type: string

# Definitions
definitions:

  Error:
    required:
      - code
      - message
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
        
  Cloud:
    description: |
      Representation of a cloud used by Cloudiator
    type: object
    required:
      - id
    allOf: 
    - $ref: '#/definitions/NewCloud'
    - properties:
        id:
          type: string
          description: Unique identifier for the cloud
          
  Api:
    description: |
      Represents an API used by a cloud
    type: object
    required:
      - providerName
    properties:
      providerName:
        type: string
        description: Name of the API provider, maps to a driver
  
  CloudCredential:
    description: |
      Represents the credentials used to authenticate with a cloud
    type: object
    required:
      - user
      - secret
    properties:
      user:
        type: string
        description: Username for authentication at the cloud provider's API
        minLength: 1
      secret:
        type: string
        description: Secret (e.g. Password) for authentication at the cloud provider's API
        minLength: 1
        
  CloudConfiguration:
    description: |
      Repesents the configuration of a cloud.
    type: object
    properties:
      properties:
        type: array
        description: Array of configuration properties.
        items:
          $ref: '#/definitions/Property'
        
  Property:
    type: object
    description: "A key-value pair"
    required:
      - key
      - value
    properties:
      key:
        type: string
        description: "Key of the property"
      value:
        type: string
        description: "Value of the property"
      
  NewCloud:
    description: |
      Represents a new cloud that is to be created
    type: object
    required:
      - name
      - api 
      - credential
      - cloudType
    properties:
      name:
        type: string
        description: "Human readable name for the cloud. Needs to be unique."
      cloudType:
        description: "Type of the cloud"
        type: string
        enum: ['PRIVATE','PUBLIC']
      api:
        $ref: '#/definitions/Api'
      credential:
        $ref: '#/definitions/CloudCredential'
      configuration:
        $ref: '#/definitions/CloudConfiguration'
        
  Image:
    description:  |
      Represents an image offer by a cloud
    type: object
    required:
      - id
      - name
      - providerId
      - operatingSystem
    properties:
      id:
        type: string
        description: "Unique identifier for this image"
      name:
        type: string
        description: "Human-readable name"
      providerId:
        type: string
        description: "Original id issued by provider"
      operatingSystem:
        $ref: '#/definitions/OperatingSystem'
        
  OperatingSystem:
    description: |
      Represents the operating system of an image
    type: object 
    properties:
      # todo: requires enum?
      operatingSystemFamily: 
        type: string
        description: "Family of the OS"
      # todo: requires enum?
      operatingSystemArchitecture:
        type: string
        description: "Architecture of the OS"
      operatingSystemVersion:
        type: string
        description: "Version of the OS"
  
  Hardware:
    description: |
      Represents a hardware offer by a cloud
    type: object
    required:
      - id
      - name
      - providerId
      - cores
      - ram
    properties:
      id:
        description: "Unique identifier for the hardware"
        type: string
      name:
        description: "Human-readable name for the hardware"
        type: string
      providerId:
        description: "Original id issued by the provider"
        type: string
      cores:
        description: "Number of cores"
        type: integer
        format: int32
      ram:
        description: "Amount of RAM"
        type: integer
        format: int64
      disk:
        description: "Amount of disk space"
        type: number
        format: double
      location:
        $ref: '#/definitions/Location'
    
  Location:
    description: |
      Repesents a (virtual) location offers by a cloud
    type: object
    required:
      - id
      - name
      - providerId
      - locationScope
      - isAssignable
    properties:
      id:
        description: "Unique identifier"
        type: string
      name:
        description: "Human-readable name"
        type: string
      providerId:
        description: "Original id issued by the provider"
        type: string
      locationScope:
        description: "Scope of the location"
        type: string
        enum: ['PROVIDER', 'REGION', 'ZONE', 'HOST']
      isAssignable:
        description: "True of the location can be used to start virtual machines, false if not"
        type: boolean
      parent:
        # self reference is broken in editor and UI
        # see https://github.com/swagger-api/swagger-editor/issues/1005
        $ref: '#/definitions/Location'
        
        
  NewPlatform:
    description: |
      Repesents a new PaaS provider to be created
    type: object
    required:
      - id
      - name
      - api
      - credential
    properties:
      id:
        description: "Unique identifier"
        type: string
      name:
        description: "Human-readable name"
        type: string
      api:
        $ref: '#/definitions/Api'
      credential:
        $ref: '#/definitions/CloudCredential'
        
  PlatformEnvironment:
    description: |
      Repesents a PaaS environemnt to run an component
    type: object
    required:
      - id
      - name
      - platformHardware
      - platformRuntime
    properties:
      id:
        description: "Unique identifier"
        type: string
      name:
        description: "Human-readable name"
        type: string
      platformHardware:
        $ref: '#/definitions/PlatformHardware'
      platformRuntime:
        $ref: '#/definitions/PlatformRuntime'
        
        
  PlatformHardware:
    description: |  
      Represents a hardware configuration for a Platform (not all attributes might be supported for all PaaS providers)
    type: object
    required:
      - id
      - name
      - cores
      - ram
      - disk
    properties:
      id:
        description: "Unique identifier for the hardware"
        type: string
      name:
        description: "Human-readable name for the hardware"
        type: string
      cores:
        description: "Number of cores"
        type: integer
        format: int32
      ram:
        description: "Amount of RAM"
        type: integer
        format: int64
      disk:
        description: "Amount of disk space"
        type: number
        format: double
      
        
  PlatformRuntime:
    description: "Represents a runtime for a Platform component, e.g. Java, PHP, Tomcat" 
    type: object
    required:
      - id
      - language
      - runtimeType
      - version
    properties:
      id:
        description: "Unique identifier for the hardware"
        type: string
      language:
        description: "the specific runtime language"
        type: string
      runtimeType:
        description: "specifies the runtime type"
        type: string
        enum:
          - runtime
          - server
      version:
        description: "the version of the specified type"
        type: number
        format: double

  PlatformService:
    description: |
      Repesents additional PaaS services to component, e.g. a database, TODO!
    type: object
    required:
      - id
      - name
    properties:
      id:
        description: "Unique identifier"
        type: string
      name:
        description: "Human-readable name"
        type: string
      
  Component:
    description: |
      Represents a component of an application.
    type: object
    discriminator: type
    required:
      - name
      - type
    properties:
      type:
        description: |
          Discriminator for polymorphism.
        type: string
      name:
        description: "Human-readable name"
        type: string
  
  DockerComponent:
    description: |
      Represents a docker container
    type: object
    required:
      - dockerImage
    allOf:
      - $ref: '#/definitions/Component'
      - properties:
          dockerImage:
            description: |
              Name of the docker image
            type: string
            
            
  PlatformComponent:
    description: |
      Represents a PaaS component
    type: object
    required:
      - sourceRepository
    allOf:
      - $ref: '#/definitions/Component'
      - properties:
          sourceRepository:
            description: |
              url to the source code repository (currently only git is supported)
            type: string
        
  LanceComponent:
    description: |
      Represents a lance component.
    type: object
    required:
      - start
    allOf:
      - $ref: '#/definitions/Component'
      - properties:
          init:
            description: | 
              Initialization action.
            type: string
          preInstall:
            description: |
              Executed before installation action. Can be e.g. used for downloading binaries.
            type: string
          install:
            description: |
              Used for installing the application.
            type: string
          postInstall:
            description: |
              Used for configuration of the application component. First action where Lance environment variables are set.
            type: string
          preStart:
            description: |
              Called before starting the application. Can be e.g. used for configuration an environment.
            type: string
          start:
            description: |
              Starts the component. Needs to return for PlainContainer and not return for Docker.
            type: string
          startDetection:
            description: |
              Detects the start of the application. Required if the application does not start instantianous.
            type: string
          stopDetection:
            description: |
              Checks if the application has stopped. Is periodically checked to detect a crash of the application.
            type: string
          postStart:
            description: |
              Executed after the application has successfully started.
            type: string
          preStop:
            description: |
              Called before the application is stopped.
            type: string
          stop:
            description: |
              Stops the application.
            type: string
          postStop:
            description: |
              Executed after the application is successfully stopped.
            type: string
          shutdown:
            description: |
              Executed before the container is shutdown. Can be used to backup state.
            type: string
        
  Application:
    description: |
      Represents an application. An application is a logical group of components.
    type: object
    properties:
      name:
        type: string
  
  ApplicationComponent:
    type: object
    properties:
      test:
        type: string
        
  Node:
    type: object
    properties:
      name:
        type: string
        
    
  Relationship:
    type: object
    properties:
      test:
        type: string
        
  VirtualMachine:
    type: object
    allOf:
      - $ref: '#/definitions/Node'
      
  Task:
    description: |
      Represents a long-running task within the system
    type: object
    properties:
      status:
        type: string
        enum: ['SCHEDULED','RUNNING','COMPLETED','FAILED']
        description: |
          The status of the running task
          
  VirtualMachineRequest:
    type: object
    properties:
      image:
        type: string
      hardware:
        type: string
      location:
        type: string
        
# Paths
paths:

  # Cloud related paths:
  /clouds:
    get:
      consumes: []
      operationId: findClouds
      tags:
        - cloud
      description: |
          Returns all clouds from the system that the user has access to
      responses:
        200:
          description: |
            All clouds
          schema:
            type: array
            items: 
              $ref: '#/definitions/Cloud'
    post:
      operationId: addCloud
      tags:
        - cloud
      description: Creates a new cloud.
      parameters:
        - name: cloud
          in: body
          description: Cloud to add
          required: true
          schema:
            $ref: '#/definitions/NewCloud'
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Cloud"
    
  /clouds/{id}:
    get:
      consumes: []
      operationId: findCloud
      tags:
        - cloud
      description: |
        Returns the cloud identified by the given id parameter
      parameters:
        - $ref: '#/parameters/id'
      responses:
        200:
         description: |
          The cloud identified by the id
         schema:
          $ref: '#/definitions/Cloud'
    delete:
      consumes: []
      operationId: deleteCloud
      tags:
        - cloud
      description: |
        Deletes the cloud identified by the given id paramater.
      parameters:
        - $ref: '#/parameters/id'
      responses:
        200:
          description: "OK"
  
  # Image related paths
  /images:
    get:
      consumes: []
      operationId: findImages
      tags:
        - cloud
      description: |
        Returns all images visable to the user
      responses:
        200:
          description: |
            All images
          schema:
            type: array
            items:
              $ref: '#/definitions/Image'
              
  /images/{id}:
    put:
      tags:
        - cloud
      operationId: editImage
      description: |
        Updates a specific image
      parameters:
        - $ref: '#/parameters/id'
        - name: image
          in: body
          description: |
            Image to update
          required: true
          schema:
            $ref: '#/definitions/Image'
      responses:
        200:
          description: |
            OK
          schema:
            $ref: '#/definitions/Image'

  # Hardware related paths
  /hardware:
    get:
      consumes: []
      operationId: findHardware
      tags:
        - cloud
      description: |
        Returns all hardware visible to the user
      responses:
        200:
          description: |
            OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Hardware'
    
  # Location related paths
  /locations:
    get:
      consumes: []
      operationId: findLocations
      tags:
        - cloud
      description: |
        Returns all locations visible to the user
      responses:
        200:
          description: |
            OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Location'
  
  # Component related paths
  /components:
    get:
      consumes: []
      operationId: findComponents
      tags:
        - application
      description: | 
        Returns all components visible to the user
      responses:
        200:
          description: |
            OK
          schema:
            type: array
            items: 
              $ref: '#/definitions/Component'
    put:
      operationId: addComponent
      tags:
        - application
      description: |
        Creates a new component
      parameters:
        - name: component
          in: body
          description: |
            Component to be created
          required: true
          schema:
            $ref: '#/definitions/Component'
      responses:
        200:
          description: |
            OK
          schema:
            $ref: '#/definitions/Component'
            
  # Task related paths
  /tasks:
    get:
      consumes: []
      operationId: findTasks
      tags:
        - task
      description: |
        Returns all running tasks visible to the user
      responses:
        200:
          description: 'OK'
          schema:
            type: array
            items:
              $ref: '#/definitions/Task'
              
  /task/{id}:
    get:
      consumes: []
      operationId: findTask
      tags:
        - task
      description: |
        Returns the task identified by the id parameter.
      parameters:
        - $ref: '#/parameters/id'
      responses:
        200:
          description: 'OK'
          schema:
            $ref: '#/definitions/Task'
        
  # Virtual machine related tasks
  /vm:
    post:
      operationId: addVM
      tags:
        - cloud
      description: 'Creates a new virtual machine request'
      parameters:
        - name: virtualMachineRequest
          in: body
          description: 'VirtualMachine Request'
          required: true
          schema:
            $ref: '#/definitions/VirtualMachineRequest'
      responses:
        202:
          description: ACCEPTED
          schema:
            $ref: '#/definitions/Task'
    
      
        
          
