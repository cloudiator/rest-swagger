#
# Documentation of the Cloudiator REST Api
#
swagger: '2.0'

# Document Metadata
info:
  version: "0.2.0"
  title: Cloudiator REST Api
  contact:
    name: Daniel Baur
    email: daniel.baur@uni-ulm.de
    url: http://cloudiator.org
  license:
    name: Apache License 2.0
    url: https://raw.githubusercontent.com/cloudiator/rest/master/LICENSE
schemes:
  - http
consumes:
  - application/json
produces:
  - application/json

host: localhost:9000

################################################################################
#####                                                                       ####
#####                              Security                                 ####
#####                                                                       ####
################################################################################

securityDefinitions:
  ApiKeyAuth:
    type: "apiKey"
    name: "X-API-Key"
    in: header


security:
  - ApiKeyAuth: []


################################################################################
#####                                                                       ####
#####                              Parameters                               ####
#####                                                                       ####
################################################################################
parameters:
  id:
    name: id
    in: path
    description: Unique identifier of the resource
    required: true
    type: string
  cloudId:
    name: cloudId
    in: query
    description: (Optional) Unique identifier to filter a specific cloud
    required: false
    type: string
  metric:
    name: metric
    in: path
    description: Unique identifier of a monitor
    required: true
    type: string
  secret:
    name: secret
    in: path
    description: Secret in path
    required: true
    type: string

################################################################################
####                                                                        ####
####                                Definitions                             ####
####                                                                        ####
################################################################################
definitions:

  Map:
    description: |
      A key - value type of Map using <String, String>.
    type: object
    additionalProperties:
      type: string

  Tuple:
    description: |
      A key - value tuple
    type: object
    required:
      - key
      - value
    properties:
      key:
        type: string
        description: |
          Key of the tuple
      value:
        type: string
        description: |
          Value of the tuple

  Api:
    description: |
      Represents an API used by a cloud
    type: object
    required:
      - providerName
    properties:
      providerName:
        type: string
        description: Name of the API provider, maps to a driver
        example: "openstack-nova"

  AttributeOptimization:
    type: object
    description: "Refers to the attribute that should be optimized"
    required:
      - objectiveClass
      - objectiveAttribute
      - aggregation
    allOf:
      - $ref: '#/definitions/Optimization'
      - properties:
          objectiveClass:
            type: string
          objectiveAttribute:
            type: string
          aggregation:
            type: string
            enum: ["SUM","AVG"]

  AttributeRequirement:
    type: object
    description: |
      Subtype of Requirement
    allOf:
      - $ref: '#/definitions/Requirement'
      - properties:
          requirementClass:
            type: string
          requirementAttribute:
            type: string
          requirementOperator:
            $ref: '#/definitions/RequirementOperator'
          value:
            type: string
    example:
      type: 'AttributeRequirement'
      requirementClass: 'requirementClassExample'
      requirementAttribute: 'requirementAttriuteExample'
      requirementOperator: 'EQ'
      value: 'valueExample'


  Cloud:
    description: |
      Representation of a cloud used by Cloudiator
    type: object
    required:
      - id
      - state
    allOf:
      - $ref: '#/definitions/NewCloud'
      - properties:
          id:
            example: "1a79a4d60de6718e8e5b326e338ae533"
            type: string
            description: Unique identifier for the cloud
          owner:
            type: string
            description: |
              Id of the user owning this cloud.
          state:
            type: string
            enum: ['OK','ERROR']
            description: State of the cloud
          diagnostic:
            type: string
            description: Diagnostic information for the cloud

  CloudConfiguration:
    description: |
      Repesents the configuration of a cloud.
    type: object
    properties:
      nodeGroup:
        type: string
        description: A prefix all Cloudiator managed entities will belong to.
        example: "cloudiator"
      properties:
        description: Configuration as key-value map.
        $ref: '#/definitions/Map'

  CloudCredential:
    description: |
      Represents the credentials used to authenticate with a cloud
    type: object
    required:
      - user
      - secret
    properties:
      user:
        type: string
        description: Username for authentication at the cloud provider's API
        minLength: 1
        example: "tenant:username"
      secret:
        type: string
        description: Secret (e.g. Password) for authentication at the cloud provider's API
        minLength: 1
        example: "MeltdownVictim"

  CloudType:
    type: string
    description: type of the cloud
    enum: ['PRIVATE','PUBLIC']

  Communication:
    type: object
    description: |
      Part of a job
      Represents a communication requirement between two tasks by mapping a required port of a
      task to a provided port of another task.
    properties:
      portRequired:
        type: string
        description: |
          The name of the required port this communication refers to.
        example: "Re10375"
      portProvided:
        type: string
        description: |
          The name of the provided port this communication refers to.
        example: "Pro11745"

  DataSink:
    type: object
    description: |
      Data Sink where the monitoring data will be reported to.
    properties:
      type:
        type: string
        enum: ["KAIROS_DB","INFLUX", "CLI","JMS"]
      configuration:
        $ref: '#/definitions/Map'

  DockerInterface:
    type: object
    description: |
      Subtype of TaskInterface to represent docker containers
    allOf:
      - $ref: '#/definitions/TaskInterface'
      - properties:
          dockerImage:
            description: |
              Name of the docker image (should include repository, credentials, tags)
            type: string
          environment:
            description: |
              A key-value map representing the environment of the docker container
            $ref: '#/definitions/Map'
          updateAction:
            type: string
            description: |
              An (optional) update action for updating the communication.

  Error:
    description: |
      Basic errorClass
    required:
      - code
      - message
    properties:
      code:
        type: integer
        format: int32
        example: 404
      message:
        type: string
        example: 'Not found'

  FaasInterface:
    description: |
      Part of a Task.
      Represents one function.
    type: object
    required:
      - functionName
      - sourceCodeUrl
      - handler
    allOf:
      - $ref: '#/definitions/TaskInterface'
      - properties:
          functionName:
            description: |
              Unique name of the function.
            type: string
          sourceCodeUrl:
            description: |
              URL path to ZIP artifact.
            type: string
          handler:
            description: |
              function in the code to be invoked.
            type: string
          triggers:
            description: |
              Events on which function will be invoked.
            type: array
            items:
              $ref: '#/definitions/Trigger'
          timeout:
            description: |
              Allowed time in seconds for function to finish its task.
            type: integer
            format: int32
            default: 6
            minimum: 1
          functionEnvironment:
            description: |
              Environment variables passed to function.
            $ref: '#/definitions/Map'
    example:
      name: "functionName"
      sourceCodeUrl: "https://www.example.com/sourceCode.zip"
      handler: "file.functionIdentifier"
      timeout: 900

  Function:
    type: object
    properties:
      id:
        type: string
      cloudId:
        type: string
      locationId:
        type: string
      memory:
        type: integer
        format: int32
      runtime:
        $ref: '#/definitions/Runtime'
      stackId:
        type: string

  GeoLocation:
    description: |
      Part of Location
      Represents a geographical location
    type: object
    properties:
      city:
        description: "City of the location"
        type: string
      country:
        description: "An ISO 3166-1 alpha-2 country code"
        type: string
      latitude:
        description: "Latitude of the location in decimal degrees"
        type: number
        format: double
      longitude:
        description: "Longitude of the location in decimal degrees"
        type: number
        format: double
    example:
      city: "Ulm"
      country: "DE"
      latitude: 48.4010822
      longitude: 9.9876076

  Hardware:
    description: |
      Represents a hardware offer by a cloud
    type: object
    required:
      - id
      - name
      - providerId
      - cores
      - ram
      - state
    properties:
      id:
        description: "Unique identifier for the hardware"
        type: string
        example: "1a79a4d60de6718e8e5b326e338ae533/RegionOne/1"
      name:
        description: "Human-readable name for the hardware"
        type: string
        example: "m1.medium"
      providerId:
        description: "Original id issued by the provider"
        type: string
        example: "1"
      cores:
        description: "Number of cores"
        type: integer
        format: int32
        example: 4
      ram:
        description: "Amount of RAM (in MB)"
        type: integer
        format: int64
        example: 2048
      disk:
        description: "Amount of disk space (in GB)"
        type: number
        format: double
        example: 100
      location:
        $ref: '#/definitions/Location'
      state:
        $ref: '#/definitions/DiscoveryItemState'
      owner:
        type: string


  HttpTrigger:
    description: |
      Subtype of Trigger.
      Represents a HTTP request which will trigger a function.
    type: object
    allOf:
      - $ref: '#/definitions/Trigger'
      - properties:
          httpPath:
            type: string
          httpMethod:
            type: string
    example:
      type: "HttpTrigger"
      httpPath: "path/to/resource"
      httpMethod: "GET"

  IdentifierRequirement:
    type: object
    description: |
      Subtype of Requirement
    required:
      - hardwareId
      - locationId
      - imageId
    allOf:
      - $ref: '#/definitions/Requirement'
      - properties:
          hardwareId:
            type: string
          locationId:
            type: string
          imageId:
            type: string
    example:
      hardwareId: "01101b2075b7046fff5eaa9beae14ccd:RegionOne/3"
      locationId: "01101b2075b7046fff5eaa9beae14ccd:RegionOne"
      imageId: "01101b2075b7046fff5eaa9beae14ccd:RegionOne/72a4b00b-705f-4290-a4de-c79eddc03fe3"
      type: "IdentifierRequirement"

  DiscoveryItemState:
    type: string
    enum: ['NEW','OK','REMOTELY_DELETED','LOCALLY_DELETED','DISABLED','DELETED','UNKNOWN']

  Image:
    description:  |
      Represents an image offer by a cloud
    type: object
    required:
      - id
      - name
      - providerId
      - operatingSystem
    properties:
      id:
        type: string
        description: "Unique identifier for this image"
        example: "1a79a4d60de6718e8e5b326e338ae533/RegionOne/1"
      name:
        type: string
        description: "Human-readable name"
        example: "Ubuntu 16.04 LTS AMD 64"
      providerId:
        type: string
        description: "Original id issued by provider"
        example: "1"
      operatingSystem:
        $ref: '#/definitions/OperatingSystem'
      location:
        $ref: '#/definitions/Location'
      state:
        $ref: '#/definitions/DiscoveryItemState'
      owner:
        type: string

  InstallationRequest:
    description: todo
    type: object
    properties:
      tools:
        type: array
        items:
          $ref: '#/definitions/Tool'
      node:
        $ref: '#/definitions/Node'

  Interval:
    type: object
    description: "A time interval consisting of unit and period"
    properties:
      unit:
        description: "The unit of the interval"
        type: string
        enum: ['DAYS', 'HOURS', 'MICROSECONDS', 'MILLISECONDS', 'MINUTES', 'NANOSECONDS', 'SECONDS']
      period:
        description: "The period of the interval"
        type: integer
        format: int64

  IpAddress:
    type: object
    required:
      - IpAddressType
      - IpVersion
    properties:
      IpAddressType:
        $ref: '#/definitions/IpAddressType'
      IpVersion:
        $ref: '#/definitions/IpVersion'
      value:
        type: string
        description: the ip address value

  IpAddressType:
    type: string
    enum: ['PUBLIC_IP','PRIVATE_IP']

  IpVersion:
    type: string
    enum: ['V4','V6']

  Job:
    description: |
      Represents a job in the system. A job is a logical
      group of tasks
    type: object
    allOf:
      - $ref: '#/definitions/JobNew'
      - properties:
          id:
            type: string
          owner:
            type: string

  JobNew:
    description: |
      Represents a job that should be created in the system.
    type: object
    required:
      - name
    properties:
      name:
        type: string
        example: "MediaWiki Application"
      tasks:
        type: array
        items:
          $ref: '#/definitions/Task'
        description: |
          An array of tasks that form this application.
      communications:
        type: array
        items:
          $ref: '#/definitions/Communication'
      requirements:
        type: array
        items:
          $ref: '#/definitions/Requirement'
      optimization:
        $ref: '#/definitions/Optimization'

  SparkInterface:
    description: |
      Subtype of TaskInterface. Describes how to deploy a Task to Spark.
    type: object
    allOf:
      - $ref: '#/definitions/TaskInterface'
      - properties:
          file:
            description: |
              An URI where the executable of the Spark Application can be retrieved.
              Either a URL pointing to a web endpoint, or a locally available file.
            type: string
          className:
            description: |
              Optional className of the class containing the main method. Only required for Java.
            type: string
          arguments:
            description: |
              Array of arguments passed to the application.
            type: array
            items:
              type: string
          sparkArguments:
            description: |
              Additional Arguments passed to Spark.
            $ref: '#/definitions/Map'
          sparkConfiguration:
            description: |
              Spark configuration properties.
            $ref: '#/definitions/Map'
          processMapping:
            $ref: '#/definitions/ProcessMapping'

  HdfsInterface:
    description: |
      Subtype of TaskInterface. Describes how to deploy a Task to Hdfs.
    type: object
    allOf:
      - $ref: '#/definitions/TaskInterface'
      - properties:
          processMapping:
            $ref: '#/definitions/ProcessMapping'


  ProcessMapping:
    type: string
    enum:
      - SINGLE
      - CLUSTER

  Distribution:
    type: object
    discriminator: type
    required:
      - type
    properties:
      type:
        type: string
        description: |
          Discriminator for polymorphism.

  NormalDistribution:
    allOf:
      - $ref: '#/definitions/Distribution'
      - properties:
          mean:
            type: number
            format: double
          stdDev:
            type: number
            format: double

  SimulationInterface:
    description: |
      Simulated task interface
    type: object
    allOf:
      - $ref: '#/definitions/TaskInterface'
      - properties:
          startTime:
            $ref: '#/definitions/Distribution'


  LanceInterface:
    description: |
      Part of a task.
      Subtype of TaskInterface.
    type: object
    required:
      - start
    allOf:
      - $ref: '#/definitions/TaskInterface'
      - properties:
          containerType:
            description: |
              The container type that lance should use.
              Can be DOCKER to force a docker deployment, NATIVE to force a plain container
              deployment or BOTH to let the system derive the container type.
            type: string
            enum: ["NATIVE", "DOCKER", "BOTH"]
          operatingSystem:
            description: |
              Describes the operating system required by this interface. If container type is set
              to NATIVE, this describes the OS required by the scripts, of container type is set
              to DOCKER, this describes the OS used to spawn the docker container.
            $ref: '#/definitions/OperatingSystem'
          init:
            description: |
              Initialization action.
            type: string
          preInstall:
            description: |
              Executed before installation action. Can be e.g. used for downloading binaries.
            type: string
          install:
            description: |
              Used for installing the application.
            type: string
          postInstall:
            description: |
              Used for configuration of the application component. First action where Lance environment variables are set.
            type: string
          preStart:
            description: |
              Called before starting the application. Can be e.g. used for configuration an environment.
            type: string
          start:
            description: |
              Starts the component. Needs to return for PlainContainer and not return for Docker.
            type: string
          startDetection:
            description: |
              Detects the start of the application. Required if the application does not start instantianous.
            type: string
          stopDetection:
            description: |
              Checks if the application has stopped. Is periodically checked to detect a crash of the application.
            type: string
          postStart:
            description: |
              Executed after the application has successfully started.
            type: string
          preStop:
            description: |
              Called before the application is stopped.
            type: string
          stop:
            description: |
              Stops the application.
            type: string
          postStop:
            description: |
              Executed after the application is successfully stopped.
            type: string
          shutdown:
            description: |
              Executed before the container is shutdown. Can be used to backup state.
            type: string
          updateAction:
            type: string
            description: |
              A script that is executed if a new instance of a downstream task is available.
    example:
      name: haproxy
      preInstall: |
        sudo apt-get -y update && sudo apt-get -y install git &&
        git clone https://github.com/dbaur/mediawiki-tutorial.git
      install: "./mediawiki-tutorial/scripts/lance/haproxy.sh install"
      start: "./mediawiki-tutorial/scripts/lance/haproxy.sh startBlocking"

  Location:
    description: |
      Repesents a (virtual) location offers by a cloud
    type: object
    required:
      - id
      - name
      - providerId
      - locationScope
      - isAssignable
    properties:
      id:
        description: "Unique identifier"
        type: string
        example: "1a79a4d60de6718e8e5b326e338ae533/RegionOne"
      name:
        description: "Human-readable name"
        type: string
        example: "RegionOne"
      providerId:
        description: "Original id issued by the provider"
        type: string
        example: "RegionOne"
      locationScope:
        description: "Scope of the location"
        type: string
        enum: ['PROVIDER', 'REGION', 'ZONE', 'HOST']
        example: 'ZONE'
      isAssignable:
        description: "True of the location can be used to start virtual machines, false if not"
        type: boolean
        example: true
      geoLocation:
        $ref: '#/definitions/GeoLocation'
      parent:
        # self reference is broken in editor and UI
        # see https://github.com/swagger-api/swagger-editor/issues/1005
        $ref: '#/definitions/Location'
      state:
        $ref: '#/definitions/DiscoveryItemState'
      owner:
        type: string

  Login:
    type: object
    description: |
      Login information provided by the user to be authorized
    required:
      - email
      - tenant
      - password
    properties:
      email:
        description: "EMail address of the user"
        type: string
        example: "john.doe@example.com"
      tenant:
        $ref: '#/definitions/Tenant'
      password:
        description: "Password of the user"
        type: string
        example: "SecretPassword"

  LoginCredential:
    type: object
    description: |
      Credentials for remote access to the virtual machine. Typically, one of password or privateKey
      is set.
    properties:
      username:
        type: string
        description: "The username for login"
      password:
        type: string
        description: "The password for login"
      privateKey:
        type: string
        description: "The private key for login"

  NodeRequirements:
    type: object
    description: |
      Issues a request to the matchmaking component
    properties:
      requirements:
        type: array
        items:
          $ref: '#/definitions/Requirement'
      optimization:
        $ref: '#/definitions/Optimization'

  NodeRequest:
    type: object
    description: |
      A request to start a node.
    properties:
      groupName:
        description: |
          An (optional) name for all nodes starting in this group
        type: string
      nodeCandidate:
        $ref: '#/definitions/NodeCandidate'

  Monitor:
    type: object
    required:
      - metric
    properties:
      metric:
        description: "Name of the collected metric"
        type: string
      targets:
        type: array
        items:
          $ref: '#/definitions/MonitoringTarget'
      sensor:
        $ref: '#/definitions/Sensor'
      sinks:
        type: array
        items:
          $ref: '#/definitions/DataSink'
      tags:
        description: "MonitoringTags as key-value map"
        $ref: '#/definitions/Map'

  MonitoringTarget:
    type: object
    required:
      - type
    properties:
      type:
        description: "target to be monitored"
        type: string
        enum: ['JOB','TASK','PROCESS','CLOUD','NODE']
      identifier:
        description: "identifier of a specific instance of the above type"
        type: string

  MonitoringTag:
    type: object
    description: "Tagging for monitoring"
    properties:
      key:
        description: "Key of the tag"
        type: string
      value:
        description: "Value of the tag"
        type: string

  NewCloud:
    description: |
      Represents a new cloud that is to be created
    type: object
    required:
      - api
      - credential
      - cloudType
    properties:
      endpoint:
        type: string
        description: "URI where the api of this cloud provider can be accessed."
        example: "https://endpoint.example.com"
      cloudType:
        $ref: '#/definitions/CloudType'
      api:
        $ref: '#/definitions/Api'
      credential:
        $ref: '#/definitions/CloudCredential'
      cloudConfiguration:
        $ref: '#/definitions/CloudConfiguration'

  NewNode:
    description: |
      Represents a new node that is to be created
    type: object
    properties:
      name:
        type: string
        description: |
          Human-readable name for the node.
      loginCredential:
        $ref: '#/definitions/LoginCredential'
      ipAddresses:
        type: array
        items:
          $ref: '#/definitions/IpAddress'
        description: |
          The public/private ip addresses under which this node is reachable.
      nodeProperties:
        $ref: '#/definitions/NodeProperties'
        description: |
          Further properties of this node.
      reason:
        type: string
        description: |
          Reason this node was created
      diagnostic:
        type: string
        description: |
          Diagnostic information about the node state
      nodeCandidate:
        type: string
        description: |
          The node candidate this node was created from if applicable.

  NewPlatform:
    description: |
      Repesents a new PaaS provider to be created
    type: object
    required:
      - name
      - api
      - credential
    properties:
      name:
        description: "Human-readable name"
        type: string
      type:
        description: "PaaS stack type"
        type: string
        enum: ['HEROKU', 'OPENSHIFT', 'CLOUDFOUNDRY']
      api:
        $ref: '#/definitions/Api'
      credential:
        $ref: '#/definitions/CloudCredential'
      endpoint:
        type: string
        description: "URI where the api of this platform provider can be accessed."
        example: "https://endpoint.example.com"

  NewPlatformEnvironment:
    description: |
      Repesents a PaaS environemnt to run an component
    type: object
    required:
      - name
      - platformHardware
      - platformRuntime
    properties:
      name:
        description: "Human-readable name"
        type: string
      platform:
        $ref: '#/definitions/Platform'
      platformHardware:
        $ref: '#/definitions/PlatformHardware'
      platformRuntime:
        $ref: '#/definitions/PlatformRuntime'
      platformService:
        type: array
        items:
          $ref: '#/definitions/PlatformService'

  NewPlatformHardware:
    description: |
      Represents a hardware configuration for a Platform (not all attributes might be supported for all PaaS providers)
    type: object
    required:
      - name
      - cores
      - ram
      - disk
    properties:
      name:
        description: "Human-readable name for the hardware"
        type: string
        example: "example.p1"
      cores:
        description: "Number of cores"
        type: integer
        format: int32
        example: 16
      ram:
        description: "Amount of RAM"
        type: integer
        format: int64
        example: 2048
      disk:
        description: "Amount of disk space"
        type: number
        format: float
        example: 100

  NewPlatformRuntime:
    description: "Represents a runtime for a Platform component, e.g. Java, PHP, Tomcat"
    type: object
    required:
      - name
      - language
      - runtimeType
      - version
    properties:
      name:
        description: "human readable name"
        type: string
      language:
        description: "the specific runtime language"
        type: string
        enum: ['PHP','JAVA','RUBY','PYTHON']
      languageVersion:
        description: "language version number"
        type: number
        format: double
        example: 11.0
      runtimeType:
        description: "specifies the runtime type"
        type: string
        enum: ['standalone','server']
      version:
        description: "the version of the specified type"
        type: number
        format: double
        example: 2.0

  ByonNode:
    description: "Representation of a BYON used by Cloudiator"
    type: object
    allOf:
      - $ref: '#/definitions/NewNode'
      - properties:
          id:
            type: string
            description: |
              Unique identifier of this BYON.
          userId:
            type: string
            description: |
              User id of the owner of this node.
          allocated:
            type: boolean
            description: |
              Signals if the node was allocated by cloudiator

  Node:
    description: "Representation of a node used by Cloudiator"
    type: object
    allOf:
      - $ref: '#/definitions/NewNode'
      - properties:
          id:
            type: string
            description: |
              Unique identifier of this node.
          originId:
            type: string
            description: |
              Original id of this node. Is present of the node was created e.g. at a cloud provider.
          userId:
            type: string
            description: |
              User id of the owner of this node.
          nodeType:
            type: string
            enum:
              - UNKNOWN_TYPE
              - VM
              - BYON
              - CONTAINER
              - FAAS
            description: |
              The type of this node.
          state:
            type: string
            enum: ['PENDING','RUNNING','ERROR','DELETED']
            description: |
              The state the node is currently in.

  NodeProperties:
    description: Attributes defining this node
    type: object
    properties:
      providerId:
        type: string
        description: |
          Id of the provider where this node is managed. For virtual machines this e.g.
          the id of the cloud.
      numberOfCores:
        type: integer
        format: int32
        description: |
          Number of cores the node has.
      memory:
        type: integer
        format: int64
        description: |
          Amount of RAM this node has (in MB).
      disk:
        type: number
        format: float
        description: |
          Amount of disk space this node has (in GB).
      operatingSystem:
        $ref: '#/definitions/OperatingSystem'
        description: |
          Operating system of this node.
      geoLocation:
        $ref: '#/definitions/GeoLocation'
        description: |
          Geographical location this node resides in.

  Solution:
    description: A valid solution to a matchmaking problem.
    type: object
    properties:
      id:
        type: string
      costs:
        type: number
        format: double
      time:
        type: number
        format: float
      isOptimal:
        type: boolean
      valid:
        type: boolean
      nodeCandidates:
        type: array
        items:
          $ref: '#/definitions/NodeCandidate'

  NodeCandidate:
    description: A node creatable by the system
    type: object
    properties:
      id:
        type: string
      nodeCandidateType:
        type: string
        enum:
          - IAAS
          - FAAS
          - PAAS
          - BYON
      price:
        type: number
        format: double
      cloud:
        $ref: '#/definitions/Cloud'
      image:
        $ref: '#/definitions/Image'
      hardware:
        $ref: '#/definitions/Hardware'
      location:
        $ref: '#/definitions/Location'
      pricePerInvocation:
        type: number
        format: double
      memoryPrice:
        type: number
        format: double
      environment:
        $ref: '#/definitions/Environment'

  Environment:
    description: Node candidate environment
    type: object
    properties:
      runtime:
        $ref: '#/definitions/Runtime'

  OCLOptimization:
    type: object
    description: "An OCL attribute expression that should be optimized"
    required:
      - expression
    allOf:
      - $ref: '#/definitions/Optimization'
      - properties:
          expression:
            description: |
              The expression that is to be opimized.
            type: string

  OclRequirement:
    type: object
    description: |
      Subytpe of Requirement
    required:
      - constraint
    allOf:
      - $ref: '#/definitions/Requirement'
      - properties:
          constraint:
            type: string
    example:
      constraint: "nodes->forAll(hardware.cores >= 4)"
      type: "OclRequirement"

  OperatingSystem:
    description: |
      Represents the operating system of an image
    type: object
    properties:
      operatingSystemFamily:
        $ref: '#/definitions/OperatingSystemFamily'
      operatingSystemArchitecture:
        $ref: '#/definitions/OperatingSystemArchitecture'
      operatingSystemVersion:
        type: number
        format: int32
        description: "Version of the OS"
        example: "1604"

  OperatingSystemArchitecture:
    description: "Type of OS Architecture"
    type: string
    enum: ['AMD64','UNKOWN','I386','ARM']

  OperatingSystemFamily:
    description: "Type of OS Family"
    type: string
    enum: ['UBUNTU','UNKOWN_OS_FAMILY','AIX','ARCH','CENTOS','DARWIN','DEBIAN','ESX','FEDORA','FREEBSD','GENTOO','HPUX',
           'COREOS','AMZN_LINUX','MANDRIVA','NETBSD','OEL','OPENBSD','RHEL','SCIENTIFIC','CEL',
           'SLACKWARE','SOLARIS','SUSE','TURBOLINUX','CLOUD_LINUX','WINDOWS']

  OperatingSystemType:
    description: "OS Type"
    type: string
    enum: ['LINUX','UNKOWN','UNIX','WINDOWS_OS','BSD','MAC']

  Optimization:
    type: object
    description: "Superclass for polymorphism, only subtypes are allowed"
    discriminator: type
    required:
      - type
    properties:
      type:
        type: string
      objective:
        type: string
        enum: ["MAXIMIZE", "MINIMIZE"]

  Platform:
    description: Representation of a platform used by Cloudiator
    type: object
    required:
      - id
    allOf:
      - $ref: '#/definitions/NewPlatform'
      - properties:
          id:
            type: string
            description: Unique identifier for the platform

  PlatformEnvironment:
    description: |
      Repesents a PaaS environemnt to run an component
    type: object
    required:
      - id
    allOf:
      - $ref: '#/definitions/NewPlatformEnvironment'
      - properties:
          id:
            description: "Unique identifier"
            type: string

  PlatformHardware:
    description: |
      Repesents a PaaS environemnt to run an component
    type: object
    required:
      - id
    allOf:
      - $ref: '#/definitions/NewPlatformHardware'
      - properties:
          id:
            description: "Unique identifier for the hardware"
            type: string
            example: "1a79a4d60de6718e8e5b326e33812345/example.p1"

  PlatformInterface:
    description: |
      Subtype of TaskInterface
      Represents a PaaS interface
    type: object
    required:
      - sourceRepository
    allOf:
      - $ref: '#/definitions/TaskInterface'
      - properties:
          sourceRepository:
            description: |
              URL to the source code repository (currently only git is supported)
            type: string

  PlatformRuntime:
    description: |
      Repesents a PaaS environemnt to run an component
    type: object
    required:
      - id
    allOf:
      - $ref: '#/definitions/NewPlatformRuntime'
      - properties:
          id:
            description: "Unique identifier for the hardwareRuntime"
            type: string
            example: "1a79a4d60de6718e8e5b326e33812345/example.p1"

  PlatformService:
    description: |
      Repesents additional PaaS services to component, e.g. a database, TODO!
    type: object
    required:
      - id
      - name
    properties:
      id:
        description: "Unique identifier"
        type: string
      name:
        description: "Human-readable name"
        type: string

  Port:
    type: object
    discriminator: type
    description: |
      polymorphic superclass, only subtypes are allowed.
      Represents a communication port of a task
    required:
      - type
      - name
    properties:
      type:
        description: |
          Discriminator for polymorphism.
          Only subtypes are allowed.
        type: string
      name:
        type: string
        description: |
          Uniquely identifies a port. Defines the name of the environment variables holding
          IP addresses of remote tasks.
    example:
      type: 'PortProvided'
      name: 'PortProvidedExample'
      port: 8090

  PortProvided:
    type: object
    description: |
      Subtype of port.
      Represents a communication port that the tasks provides for other tasks
      or the end user.
    allOf:
      - $ref: '#/definitions/Port'
      - type: object
        required:
          - port
        properties:
          port:
            type: integer
            format: int32
    example:
      type: 'PortProvided'
      name: 'PortProvidedExample'
      port: 8090

  PortRequired:
    type: object
    description: |
      Subtype of port.
      Represents a communication port that the task requires from other (downstream) tasks.
    allOf:
      - $ref: '#/definitions/Port'
      - type: object
        required:
          - isMandatory
        properties:
          isMandatory:
            type: boolean
            description: |
              States if an instance of a downstream tasks needs to be already started (true), or
              if the task can start without a downstream task (false).
    example:
      type: 'PortProvided'
      name: 'PortProvidedExample'
      updateAction: "./mediawiki-tutorial/scripts/lance/haproxy.sh configure"
      isMandatory: true

  CloudiatorProcessNew:
    type: object
    discriminator: processType
    description: "A process represents a task running on a node"
    required:
      - schedule
      - task
      - taskInterface
    properties:
      processType:
        type: string
      schedule:
        type: string
        description: "The id of the schedule this process belongs to."
      task:
        type: string
        description: "The id of the task that is instantiated by this process."
      taskInterface:
        type: string
        description: "The task interface used for running the process."

  SingleProcessNew:
    type: object
    allOf:
      - $ref: '#/definitions/CloudiatorProcessNew'
      - properties:
          node:
            type: string
            description: "The id of the node this process is hosted on."
        required:
          - node

  ClusterProcessNew:
    type: object
    allOf:
      - $ref: '#/definitions/CloudiatorProcessNew'
      - properties:
          nodes:
            type: array
            items:
              type: string
            description: "A list of node identifiers defining the cluster the process is hosted on."
        required:
          - nodes

  CloudiatorProcess:
    type: object
    discriminator: processType
    properties:
      id:
        type: string
      originId:
        type: string
      processType:
        type: string
      state:
        type: string
        enum: ['PENDING','RUNNING','ERROR','DELETED','FINISHED']
      type:
        type: string
        enum: ["LANCE","SPARK","FAAS","SIMULATION","UNKNOWN"]
      schedule:
        type: string
        description: "The id of the schedule this process belongs to."
      task:
        type: string
        description: "The id of the task that is instantiated by this process."
      taskInterface:
        type: string
        description: "The task interface used for running the process."
      diagnostic:
        type: string
        description: "Diagnostic information about this process"
      reason:
        type: string
        description: "Reason this process was created"
      owner:
        type: string
        description: "The user this process was created for"
      ipAddresses:
        type: array
        items:
          $ref: '#/definitions/IpAddress'
        description: |
          The public/private ip addresses under which this process is reachable.
      endpoint:
        type: string
        description: |
          The endpoint where this process is reachable.

  SingleProcess:
    type: object
    allOf:
      - $ref: '#/definitions/CloudiatorProcess'
      - properties:
          node:
            type: string
            description: "The id of the node this process is hosted on."

  ClusterProcess:
    type: object
    allOf:
      - $ref: '#/definitions/CloudiatorProcess'
      - properties:
          nodes:
            type: array
            items:
              type: string
            description: "A list of node identifiers defining the cluster the process is hosted on."

  PushSensor:
    type: object
    allOf:
      - $ref: '#/definitions/Sensor'
      - properties:
          port:
            description: |
              (optional) port recommendation for starting the push sensor. API does not guarantee
              that this port will be used.
            type: integer
            format: int32

  PullSensor:
    type: object
    allOf:
      - $ref: '#/definitions/Sensor'
      - properties:
          className:
            description: "ClassName of the sensor"
            type: string
          configuration:
            description: "Configuration of the sensor as key-value map"
            $ref: '#/definitions/Map'
          interval:
            description: "The interval at which the sensor is executed"
            $ref: '#/definitions/Interval'

  Runtime:
    description: |
      Represents runtime provided by a FaaS platform.
    type: string
    enum:
      - nodejs
      - python
      - java
      - dotnet
      - go

  Queue:
    description: |
      Represents a queued task within the system. Used to execute long running requests.
    type: object
    properties:
      id:
        type: string
        description: "Unique identifier for the queued task"
      status:
        $ref: '#/definitions/QueueStatus'
      start:
        type: string
        format: 'date-time'
      end:
        type: string
        format: 'date-time'
      diagnosis:
        type: string
        description: "Gives human-readable feedback"
      location:
        type: string
        description: "Location of the original entity"
      taskId:
        type: string
        description: "Id of the original entity"

  QueueStatus:
    description: |
      Status of the running task
    type: string
    enum: ['SCHEDULED','RUNNING','COMPLETED','FAILED']

  Requirement:
    type: object
    description: "polymorphic Superclass, only subtypes are allowed"
    discriminator: type
    required:
      - type
    properties:
      type:
        type: string
    example:
      type: "IdentifierRequirement"
      hardwareId: "hardwareId"
      locationId: "locationId"
      imageId: "imageId"

  RequirementOperator:
    type: string
    description: "Part of AttributeRequirement"
    enum: ['EQ', 'LEQ', 'GEQ', 'GT', 'LT', 'NEQ', 'IN']

  ScheduleNew:
    type: object
    description: |
      Schedules an already created job within the system.
    properties:
      job:
        description: "The identifier of the job"
        type: string
      instantiation:
        description: "If the instantiation should be handled AUTOMATIC or MANUAL"
        type: string
        enum: ["AUTOMATIC","MANUAL"]

  Schedule:
    type: object
    required:
      - id
    allOf:
      - $ref: '#/definitions/ScheduleNew'
      - properties:
          id:
            type: string
          owner:
            type: string
          processes:
            type: array
            items:
              $ref: '#/definitions/CloudiatorProcess'
          state:
            type: string
            enum:
              - PENDING
              - RUNNING
              - ERROR
              - RESTORING
              - DELETED
              - MANUAL

  Sensor:
    type: object
    discriminator: type
    description: |
      Represents a sensor used for collecting monitoring data
    properties:
      type:
        description: "Discriminator used for sensor polymorphism"
        type: string

  Task:
    description: |
      Represents a new task of a job.
    type: object
    required:
      - name
      - behaviour
    properties:
      name:
        description: "Human-readable name. Uniquely identifies a task."
        type: string
      ports:
        type: array
        items:
          $ref: '#/definitions/Port'
      interfaces:
        description: "Interfaces of this task"
        type: array
        items:
          $ref: '#/definitions/TaskInterface'
      optimization:
        $ref: '#/definitions/Optimization'
      requirements:
        type: array
        items:
          $ref: '#/definitions/Requirement'
      behaviour:
        $ref: '#/definitions/Behaviour'
    example:
      name: "TaskTest"
      ports:
        - type: "PortProvided"
          name: "PortProvidedTest"
          port: 12345
        - type: "PortRequired"
          name: "PortRequiredTest"
          updateAction: "UpdateActionTest"
          isMandatory: true
      interfaces:
        - type: "DockerInterface"
          dockerImage: "DockerImage"
      requirements:
        - type: "OclRequirement"
          constraint: "oclRequirement"
        - type: "IdentifierRequirement"
          hardwareId: "hardwareId"
          locationId: "locationId"
          imageId: "imageId"

  Behaviour:
    description: |
      Represents the runtime behaviour of a task
    type: object
    discriminator: type
    required:
      - type
    properties:
      type:
        type: string
        description: |
          Discriminator for polymorphism

  ServiceBehaviour:
    description: |
      Subtype of Behaviour
      Represents a service runtime behaviour
    type: object
    required:
      - restart
    allOf:
      - $ref: '#/definitions/Behaviour'
      - properties:
          restart:
            description: |
              True if the service should be restarted failure, false if not
            type: boolean

  PeriodicBehaviour:
    description: |
      Subtype of Behaviour
      Represents a periodic runtime behaviour
    type: object
    required:
      - interval
      - collisionHandling
    allOf:
      - $ref: '#/definitions/Behaviour'
      - properties:
          interval:
            $ref: '#/definitions/Interval'
          collisionHandling:
            type: string
            enum:
              - CANCEL
              - PARALLEL
              - SKIP

  TaskInterface:
    description: |
      Represents an interface
    type: object
    discriminator: type
    required:
      - type
    properties:
      type:
        type: string
        description: |
          Discriminator for polymorphism.

  Tenant:
    type: object
    description: |
      Represents a tenant of the system.
    required:
      - tenant
    properties:
      tenant:
        type: string
        description: "The tenant"
        example: "admin"

  Text:
    type: object
    description: |
      Represents a string as valid json object
    required:
      - content
    properties:
      content:
        type: string
        description: "Content of the string"

  Token:
    type: object
    description: |
      Represents an API Token, that is used to represent a successful authentication of a user
    required:
      - token
    properties:
      token:
        type: string
        description: "The token"
        example: "theToken"
      owner:
        type: string
        description: "owner of the token"
        example: "owner@home.office"
      issuedTime:
        type: integer
        format: int64
        description: "SystemMillis Token was issued"
        example: 1273222647313
      expireTime:
        type: integer
        format: int64
        description: "SystemMillis the Token expires"
        example: 1273827447313

  Tool:
    description: a Cloudiator tool to be installed on a node
    type: string
    enum: ["DOCKER","KAIROSDB", "LANCE", "VISOR", "AXE", "SPARK_WORKER", "DLMS_AGENT", "ALLUXIO_CLIENT", "EMS_CLIENT"]

  Trigger:
    description: |
      Represents an event that triggers a function.
    type: object
    discriminator: type
    required:
      - type
    properties:
      type:
        type: string
        description: |
          Discriminator for polymorphism.

  User:
    type: object
    description: |
      A user of the system.
    properties:
      email:
        type: string
        description: "EMail address of the user"
      tenant:
        $ref: "#/definitions/Tenant"

  UserNew:
    type: object
    description: |
      Represents a user that should be create in the system
    required:
      - email
      - password
      - passwordRepeat
      - tenant
    properties:
      email:
        type: string
        description: "EMail address of the user"
      password:
        type: string
        description: "Password of the user"
      passwordRepeat:
        type: string
        description: "Repetition of the user's password"
      tenant:
        $ref: "#/definitions/Tenant"

  VirtualMachine:
    type: object
    properties:
      image:
        $ref: '#/definitions/Image'
      hardware:
        $ref: '#/definitions/Hardware'
      location:
        $ref: '#/definitions/Location'
      id:
        type: string
        example: "1a79a4d60de6718e8e5b326e338ae5vm"
      ipaddresses:
        type: array
        items:
          $ref: '#/definitions/IpAddress'
      logincredential:
        $ref: '#/definitions/LoginCredential'
      owner:
        type: string
      state:
        type: string
        enum: ['RUNNING','ERROR']

  VirtualMachineRequest:
    type: object
    description: |
      Represents a request to create a new virtual machine.
    properties:
      image:
        type: string
        example: "01101b2075b7046fff5eaa9beae14ccd:RegionOne/72a4b00b-705f-4290-a4de-c79eddc03fe3"
      hardware:
        type: string
        example: "01101b2075b7046fff5eaa9beae14ccd:RegionOne/3"
      location:
        type: string
        example: "01101b2075b7046fff5eaa9beae14ccd:RegionOne"


  Scale:
    type: object
    description: |
      Scaling action object containing the required information to scale an Cloudiator cluster process
    properties:
      schedule:
        description: "The identifier of the schedule"
        type: string
      task:
        description: "The identifier of the task"
        type: string
      scaleDirection:
        type: string
        enum:
          - SCALE_IN
          - SCALE_OUT
      nodes:
        type: array
        items:
          type: string
        description: "An optional list of nodes for the scaling process"


responses:
  400BadRequestResponse:
    description: Bad Request
    schema:
      $ref: '#/definitions/Error'
    examples:
      code: 400
      message: "Bad Request"
  401UnauthorizedResponse:
    description: Authorization for this action is missing
    schema:
      $ref: '#/definitions/Error'
    examples:
      code: 401
      message: "Authorization for this action is missing"
  403ForbiddenResponse:
    description: Forbidden action
    schema:
      $ref: '#/definitions/Error'
    examples:
      code: 403
      message: "Forbidden action"
  404NotFoundResponse:
    description: Item not found
    schema:
      $ref: '#/definitions/Error'
    examples:
      code: 404
      message: "Item not found"
  500ErrorResponse:
    description: An unexpected Error occured
    schema:
      $ref: '#/definitions/Error'
    examples:
      code: 500
      message: "An unexpected Error occurred"
  504GatewayTimeout:
    description: Server temporary not available
    schema:
      $ref: '#/definitions/Error'
    examples:
      code: 504
      message: "Server temporary not available"


################################################################################
####                                                                        ####
####                              Path structure                            ####
####                                                                        ####
################################################################################

paths:

  # User Related paths
  /login:
    post:
      operationId: login
      tags:
        - user
      description: |
        Authenticates a user
      parameters:
        - name: login
          in: body
          description: |
            User login request
          schema:
            $ref: '#/definitions/Login'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Token'
  /users:
    post:
      operationId: createUser
      tags:
        - user
      description: |
        Creates a new user
      parameters:
        - name: user
          in: body
          description: |
            User creation request
          schema:
            $ref: '#/definitions/UserNew'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/User'

  /tenants:
    post:
      operationId: createTenant
      tags:
        - user
      description: |
        Creates a new tenant
      parameters:
        - name: tenant
          in: body
          description: |
            Tenant creation request
          schema:
            $ref: '#/definitions/Tenant'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Tenant'

  # Matchmaking related paths
  /nodeCandidates/{id}:
    get:
      operationId: getNodeCandidate
      tags:
        - matchmaking
      description: |
        Returns the node candidate with the given id if it exists.
      parameters:
        - $ref: '#/parameters/id'
      responses:
        200:
          description: |
            The node candidate identified with the id
          schema:
            $ref: '#/definitions/NodeCandidate'

  /nodeCandidates:
    post:
      operationId: findNodeCandidates
      tags:
        - matchmaking
      description: |
        Returns possible node candidates.
      parameters:
        - name: nodeRequirements
          in: body
          description: |
            Node Request
          required: false
          schema:
            type: array
            items:
              $ref: '#/definitions/Requirement'
      responses:
        202:
          description: ACCEPTED
          schema:
            type: array
            items:
              $ref: '#/definitions/NodeCandidate'

  # MISC
  /solution/{id}:
    get:
      operationId: getSolution
      tags:
        - matchmaking
      description: |
        Returns a solution of the matchmaking process (if it is still available)
      parameters:
        - $ref: '#/parameters/id'
      responses:
        200:
          description: |
            The solution identified with the id
          schema:
            $ref: '#/definitions/Solution'

  /matchmaking:
    put:
      operationId: solveMatchmaking
      tags:
        - matchmaking
      description: 'Solves a matchmaking problem'
      parameters:
        - name: nodeRequirements
          in: body
          description: 'The requirements with respect to nodes'
          required: true
          schema:
            $ref: '#/definitions/NodeRequirements'
      responses:
        202:
          description: ACCEPTED
          schema:
            $ref: '#/definitions/Queue'

  /installer:
    post:
      operationId: installTools
      tags:
        - misc
      description: Installs Cloudiator tools on provided node
      parameters:
        - name: installRequest
          in: body
          description: a request to install the cloudiator tools on a provided node
          required: true
          schema:
            $ref: '#/definitions/InstallationRequest'
      responses:
        '200':
          description: OK

  # Cloud related paths:
  /clouds:
    get:
      consumes: []
      operationId: findClouds
      tags:
        - cloud
      description: |
        Returns all clouds from the system that the user has access to
      responses:
        200:
          description: |
            All clouds
          schema:
            type: array
            items:
              $ref: '#/definitions/Cloud'
        401:
          $ref: '#/responses/401UnauthorizedResponse'
        403:
          $ref: '#/responses/403ForbiddenResponse'
        500:
          $ref: '#/responses/500ErrorResponse'
        504:
          $ref: '#/responses/504GatewayTimeout'
    post:
      operationId: addCloud
      tags:
        - cloud
      description: Creates a new cloud.
      parameters:
        - name: cloud
          in: body
          description: Cloud to add
          required: true
          schema:
            $ref: '#/definitions/NewCloud'
      responses:
        201:
          description: "Created"
          schema:
            $ref: "#/definitions/Cloud"
        400:
          $ref: '#/responses/400BadRequestResponse'
        401:
          $ref: '#/responses/401UnauthorizedResponse'
        403:
          $ref: '#/responses/403ForbiddenResponse'
        404:
          $ref: '#/responses/404NotFoundResponse'
        500:
          $ref: '#/responses/500ErrorResponse'
        504:
          description: 'Service temporary unavailable'
          schema:
            $ref: '#/definitions/Error'


  /clouds/{id}:
    get:
      consumes: []
      operationId: findCloud
      tags:
        - cloud
      description: |
        Returns the cloud identified by the given id parameter
      parameters:
        - $ref: '#/parameters/id'
      responses:
        200:
          description: |
            The cloud identified by the id
          schema:
            $ref: '#/definitions/Cloud'
        401:
          $ref: '#/responses/401UnauthorizedResponse'
        403:
          $ref: '#/responses/403ForbiddenResponse'
        500:
          $ref: '#/responses/500ErrorResponse'
        504:
          $ref: '#/responses/504GatewayTimeout'
    delete:
      consumes: []
      operationId: deleteCloud
      tags:
        - cloud
      description: |
        Deletes the cloud identified by the given id paramater.
      parameters:
        - $ref: '#/parameters/id'
      responses:
        200:
          description: "OK"
        400:
          $ref: '#/responses/400BadRequestResponse'
        401:
          $ref: '#/responses/401UnauthorizedResponse'
        403:
          $ref: '#/responses/403ForbiddenResponse'
        404:
          $ref: '#/responses/404NotFoundResponse'
        500:
          $ref: '#/responses/500ErrorResponse'
        504:
          $ref: '#/responses/504GatewayTimeout'

  # Image related paths
  /images:
    get:
      consumes: []
      operationId: findImages
      tags:
        - cloud
      description: |
        Returns all images visable to the user
      parameters:
        - $ref: '#/parameters/cloudId'
      responses:
        200:
          description: |
            All images
          schema:
            type: array
            items:
              $ref: '#/definitions/Image'
        401:
          $ref: '#/responses/401UnauthorizedResponse'
        403:
          $ref: '#/responses/403ForbiddenResponse'
        500:
          $ref: '#/responses/500ErrorResponse'
        504:
          $ref: '#/responses/504GatewayTimeout'

  /images/{id}:
    get:
      tags:
        - cloud
      operationId: getImage
      description: |
        Retrieves the image with the given id.
      parameters:
        - $ref: '#/parameters/id'
      responses:
        200:
          description: |
            OK
          schema:
            $ref: '#/definitions/Image'
    put:
      tags:
        - cloud
      operationId: editImage
      description: |
        Updates a specific image
      parameters:
        - $ref: '#/parameters/id'
        - name: image
          in: body
          description: |
            Image to update
          required: true
          schema:
            $ref: '#/definitions/Image'
      responses:
        200:
          description: |
            OK
          schema:
            $ref: '#/definitions/Image'
        400:
          $ref: '#/responses/400BadRequestResponse'
        401:
          $ref: '#/responses/401UnauthorizedResponse'
        403:
          $ref: '#/responses/403ForbiddenResponse'
        404:
          $ref: '#/responses/404NotFoundResponse'
        500:
          $ref: '#/responses/500ErrorResponse'
        504:
          $ref: '#/responses/504GatewayTimeout'

  # Hardware related paths
  /hardware:
    get:
      consumes: []
      operationId: findHardware
      tags:
        - cloud
      description: |
        Returns all hardware visible to the user
      parameters:
        - $ref: '#/parameters/cloudId'
      responses:
        200:
          description: |
            OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Hardware'
        401:
          $ref: '#/responses/401UnauthorizedResponse'
        403:
          $ref: '#/responses/403ForbiddenResponse'
        500:
          $ref: '#/responses/500ErrorResponse'
        504:
          $ref: '#/responses/504GatewayTimeout'

  /hardware/{id}:
    get:
      tags:
        - cloud
      operationId: getHardware
      description: |
        Retrieves the hardware with the given id.
      parameters:
        - $ref: '#/parameters/id'
      responses:
        200:
          description: |
            OK
          schema:
            $ref: '#/definitions/Hardware'
    put:
      tags:
        - cloud
      operationId: editHardware
      description: |
        Updates a specific hardware
      parameters:
        - $ref: '#/parameters/id'
        - name: hardware
          in: body
          description: |
            Hardware to update
          required: true
          schema:
            $ref: '#/definitions/Hardware'
      responses:
        200:
          description: |
            OK
          schema:
            $ref: '#/definitions/Hardware'
        400:
          $ref: '#/responses/400BadRequestResponse'
        401:
          $ref: '#/responses/401UnauthorizedResponse'
        403:
          $ref: '#/responses/403ForbiddenResponse'
        404:
          $ref: '#/responses/404NotFoundResponse'
        500:
          $ref: '#/responses/500ErrorResponse'
        504:
          $ref: '#/responses/504GatewayTimeout'

  # Location related paths
  /locations:
    get:
      consumes: []
      operationId: findLocations
      parameters:
        - $ref: '#/parameters/cloudId'
      tags:
        - cloud
      description: |
        Returns all locations visible to the user
      responses:
        200:
          description: |
            OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Location'
        401:
          $ref: '#/responses/401UnauthorizedResponse'
        403:
          $ref: '#/responses/403ForbiddenResponse'
        500:
          $ref: '#/responses/500ErrorResponse'
        504:
          $ref: '#/responses/504GatewayTimeout'

  /locations/{id}:
    get:
      tags:
        - cloud
      operationId: getLocation
      description: |
        Retrieves the location with the given id.
      parameters:
        - $ref: '#/parameters/id'
      responses:
        200:
          description: |
            OK
          schema:
            $ref: '#/definitions/Location'
    put:
      tags:
        - cloud
      operationId: editLocation
      description: |
        Updates a specific location
      parameters:
        - $ref: '#/parameters/id'
        - name: location
          in: body
          description: |
            Location to update
          required: true
          schema:
            $ref: '#/definitions/Location'
      responses:
        200:
          description: |
            OK
          schema:
            $ref: '#/definitions/Location'
        400:
          $ref: '#/responses/400BadRequestResponse'
        401:
          $ref: '#/responses/401UnauthorizedResponse'
        403:
          $ref: '#/responses/403ForbiddenResponse'
        404:
          $ref: '#/responses/404NotFoundResponse'
        500:
          $ref: '#/responses/500ErrorResponse'
        504:
          $ref: '#/responses/504GatewayTimeout'

  /discovery/status:
    get:
      tags:
        - cloud
      operationId: discoveryStatus
      description: |
        Gets the status of the discovery engine
      responses:
        200:
          description: |
            OK
          schema:
            type: object
            additionalProperties:
              type: string


  # Monitoring related paths

  /monitors:
    get:
      consumes: []
      operationId: findMonitors
      tags:
        - monitoring
      description: |
        Returns all monitors visible to the user
      responses:
        200:
          description: |
            OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Monitor'
    post:
      operationId: addMonitor
      tags:
        - monitoring
      description: |
        Creates a monitor
      parameters:
        - name: monitor
          in: body
          description: |
            Monitor to be created
          required: true
          schema:
            $ref: '#/definitions/Monitor'
      responses:
        200:
          description: |
            OK
          schema:
            $ref: '#/definitions/Monitor'
  /monitors/{metric}:
    get:
      consumes: []
      operationId: getMonitor
      tags:
        - monitoring
      description: |
        Retrieves the monitor with the given metric name
      parameters:
        - $ref: '#/parameters/metric'
        - name: target
          in: body
          description: |
            Target of the Monitor
          required: true
          schema:
            $ref: '#/definitions/MonitoringTarget'
      responses:
        200:
          description: |
            OK
          schema:
            $ref: '#/definitions/Monitor'
    delete:
      consumes: []
      operationId: deleteMonitor
      tags:
        - monitoring
      description: |
        Deletes the monitor identified by the given metric name.
      parameters:
        - $ref: '#/parameters/metric'
        - name: target
          in: body
          description: |
            Target of the Monitor
          required: true
          schema:
            $ref: '#/definitions/MonitoringTarget'
      responses:
        200:
          description: "OK"
    put:
      operationId: updateMonitor
      tags:
        - monitoring
      description: |
        Updating a monitor
      parameters:
        - $ref: '#/parameters/metric'
        - name: monitor
          in: body
          description: |
            Monitor to be updated
          required: true
          schema:
            $ref: '#/definitions/Monitor'
      responses:
        200:
          description: |
            OK
          schema:
            $ref: '#/definitions/Monitor'


  # Jobs related paths

  /jobs:
    get:
      consumes: []
      operationId: findJobs
      tags:
        - job
      description: |
        Returns all jobs visible to the user
      responses:
        200:
          description: |
            OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Job'
        401:
          $ref: '#/responses/401UnauthorizedResponse'
        403:
          $ref: '#/responses/403ForbiddenResponse'
        500:
          $ref: '#/responses/500ErrorResponse'
        504:
          $ref: '#/responses/504GatewayTimeout'
    post:
      operationId: addJob
      tags:
        - job
      description:
        Creates a new job
      parameters:
        - name: job
          in: body
          description: |
            Job to be created.
          required: true
          schema:
            $ref: '#/definitions/JobNew'
      responses:
        200:
          description: |
            OK
          schema:
            $ref: '#/definitions/Job'
        400:
          $ref: '#/responses/400BadRequestResponse'
        401:
          $ref: '#/responses/401UnauthorizedResponse'
        403:
          $ref: '#/responses/403ForbiddenResponse'
        404:
          $ref: '#/responses/404NotFoundResponse'
        500:
          $ref: '#/responses/500ErrorResponse'
        504:
          $ref: '#/responses/504GatewayTimeout'

  /jobs/{id}:
    get:
      consumes: []
      operationId: findJob
      tags:
        - job
      description: |
        Returns the job with the given id.
      parameters:
        - $ref: '#/parameters/id'
      responses:
        200:
          description: |
            The job identified by the id
          schema:
            $ref: '#/definitions/Job'
        401:
          $ref: '#/responses/401UnauthorizedResponse'
        403:
          $ref: '#/responses/403ForbiddenResponse'
        500:
          $ref: '#/responses/500ErrorResponse'
        504:
          $ref: '#/responses/504GatewayTimeout'

  /jobs/{id}/graph:
    get:
      consumes: []
      description: |
        Returns a json graph representation usable by cyctoscape.js
      operationId: jobGraph
      tags:
        - job
      parameters:
        - $ref: '#/parameters/id'
      responses:
        200:
          description: |
            See js.cyctoscape.org
          schema:
            type: object

  /schedule:
    get:
      consumes: []
      operationId: getSchedules
      tags:
        - process
      description: |
        Retrieves all schedules by the current user.
      responses:
        200:
          description: "OK"
          schema:
            type: array
            items:
              $ref: '#/definitions/Schedule'
    post:
      operationId: addSchedule
      tags:
        - process
      description: |
        Creates a new schedule
      parameters:
        - name: schedule
          in: body
          description: |
            Schedule to be created
          required: true
          schema:
            $ref: '#/definitions/ScheduleNew'
      responses:
        202:
          description: ACCEPTED
          schema:
            $ref: '#/definitions/Queue'

  /schedule/{id}:
    get:
      consumes: []
      operationId: findSchedule
      tags:
        - process
      parameters:
        - $ref: '#/parameters/id'
      description: |
        Retrieves the schedule identified by parameter id.
      responses:
        200:
          description: "OK"
          schema:
            $ref: '#/definitions/Schedule'
    delete:
      consumes: []
      operationId: deleteSchedule
      tags:
        - process
      parameters:
        - $ref: '#/parameters/id'
      description: |
        Deletes the schedule identified by the given id and all corresponding processes and nodes.
      responses:
        202:
          description: "ACCEPTED"
          schema:
            $ref: '#/definitions/Queue'

  /schedule/{id}/graph:
    get:
      consumes: []
      description: |
        Returns a json graph representation usable by cyctoscape.js
      operationId: scheduleGraph
      tags:
        - process
      parameters:
        - $ref: '#/parameters/id'
      responses:
        200:
          description: |
            See js.cyctoscape.org
          schema:
            type: object

  /process:
    get:
      consumes: []
      operationId: getProcesses
      tags:
        - process
      description: |
        Retrieves all process of the current user matching the parameters.
      parameters:
        - name: scheduleId
          in: query
          description: |
            Id of the schedule.
          required: false
          type: string
      responses:
        200:
          description: "OK"
          schema:
            type: array
            items:
              $ref: '#/definitions/CloudiatorProcess'

    post:
      operationId: createProcess
      tags:
        - process
      description: |
        Creates a new process
      parameters:
        - name: process
          in: body
          description: |
            Process to be created
          required: true
          schema:
            $ref: '#/definitions/CloudiatorProcessNew'
      responses:
        202:
          description: ACCEPTED
          schema:
            $ref: '#/definitions/Queue'

  /process/{id}:
    get:
      consumes: []
      operationId: findProcess
      tags:
        - process
      description: |
        Finds the process corresponding to the given id.
      parameters:
        - $ref: '#/parameters/id'
      responses:
        200:
          description: "OK"
          schema:
            $ref: '#/definitions/CloudiatorProcess'

    delete:
      consumes: []
      operationId: deleteProcess
      tags:
        - process
      description: |
        Deletes the process corresponding to the given id.
      parameters:
        - $ref: '#/parameters/id'
      responses:
        202:
          description: ACCEPTED
          schema:
            $ref: '#/definitions/Queue'

  /process/{id}/{secret}:
    post:
      consumes: []
      operationId: finishProcess
      tags:
        - process
      description: |
        Finishes the process with the corresponding id
      parameters:
        - $ref: '#/parameters/id'
        - $ref: '#/parameters/secret'
      responses:
        200:
          description: ACCEPTED

  # Long Running Request related paths
  /queue:
    get:
      consumes: []
      operationId: getQueuedTasks
      tags:
        - queue
      description: |
        Returns all running queued tasks visible to the user
      responses:
        200:
          description: 'OK'
          schema:
            type: array
            items:
              $ref: '#/definitions/Queue'
        401:
          $ref: '#/responses/401UnauthorizedResponse'
        403:
          $ref: '#/responses/403ForbiddenResponse'
        500:
          $ref: '#/responses/500ErrorResponse'
        504:
          $ref: '#/responses/504GatewayTimeout'

  /queue/{id}:
    get:
      consumes: []
      operationId: findQueuedTask
      tags:
        - queue
      description: |
        Returns the queued task with the given id.
      parameters:
        - $ref: '#/parameters/id'
      responses:
        200:
          description: 'OK'
          schema:
            $ref: '#/definitions/Queue'
        401:
          $ref: '#/responses/401UnauthorizedResponse'
        403:
          $ref: '#/responses/403ForbiddenResponse'
        500:
          $ref: '#/responses/500ErrorResponse'
        504:
          $ref: '#/responses/504GatewayTimeout'

  # Node related tasks
  /node:
    get:
      consumes: []
      operationId: findNodes
      tags:
        - node
      description: "Retrieve all nodes the current user has access to"
      responses:
        200:
          description: 'OK'
          schema:
            type: array
            items:
              $ref: '#/definitions/Node'
    post:
      operationId: addNode
      tags:
        - node
      description: 'Create a new node request'
      parameters:
        - name: nodeRequest
          in: body
          description: 'Node Request'
          required: true
          schema:
            $ref: '#/definitions/NodeRequest'
      responses:
        202:
          description: ACCEPTED
          schema:
            $ref: '#/definitions/Queue'
        400:
          $ref: '#/responses/400BadRequestResponse'
        401:
          $ref: '#/responses/401UnauthorizedResponse'
        403:
          $ref: '#/responses/403ForbiddenResponse'
        404:
          $ref: '#/responses/404NotFoundResponse'
        500:
          $ref: '#/responses/500ErrorResponse'
        504:
          $ref: '#/responses/504GatewayTimeout'

  /node/{id}:
    get:
      consumes: []
      operationId: getNode
      tags:
        - node
      description: "Retrieves the node with the given id."
      parameters:
        - $ref: '#/parameters/id'
      responses:
        200:
          description: |
            OK
          schema:
            $ref: '#/definitions/Node'
    delete:
      consumes: []
      description: 'Deletes the node with the given id.'
      operationId: deleteNode
      tags:
        - node
      parameters:
        - $ref: '#/parameters/id'
      responses:
        202:
          description: |
            OK
          schema:
            $ref: '#/definitions/Queue'

  /byon:
    get:
      consumes: []
      operationId: findByons
      tags:
        - node
      description: "Retrieve all BYONs the current user has access to"
      responses:
        200:
          description: 'OK'
          schema:
            type: array
            items:
              $ref: '#/definitions/ByonNode'
    post:
      operationId: addByon
      tags:
        - node
      description: "Registers an already existing node for usage"
      parameters:
        - name: new-node
          in: body
          required: true
          description: 'Node to be registered'
          schema:
            $ref: '#/definitions/NewNode'
      responses:
        200:
          description: 'OK'
          schema:
            $ref: '#/definitions/ByonNode'

  /byon/{id}:
    delete:
      consumes: []
      description: 'Deletes the already existing node from cloudiator, if not allocated.'
      operationId: deleteByon
      tags:
        - node
      parameters:
        - $ref: '#/parameters/id'
      responses:
        202:
          description: |
            OK
          schema:
            $ref: '#/definitions/Queue'
        404:
          $ref: '#/responses/404NotFoundResponse'

  # Virtual machine related tasks
  /vm:
    get:
      operationId: findVMs
      tags:
        - cloud
      description: "Finds all virtual machines the user has access to"
      parameters:
        - $ref: '#/parameters/cloudId'
      responses:
        200:
          description: "OK"
          schema:
            type: array
            items:
              $ref: '#/definitions/VirtualMachine'
    post:
      operationId: addVM
      tags:
        - cloud
      description: 'Creates a new virtual machine request'
      parameters:
        - name: virtualMachineRequest
          in: body
          description: 'VirtualMachine Request'
          required: true
          schema:
            $ref: '#/definitions/VirtualMachineRequest'
      responses:
        202:
          description: ACCEPTED
          schema:
            $ref: '#/definitions/Queue'
        400:
          $ref: '#/responses/400BadRequestResponse'
        401:
          $ref: '#/responses/401UnauthorizedResponse'
        403:
          $ref: '#/responses/403ForbiddenResponse'
        404:
          $ref: '#/responses/404NotFoundResponse'
        500:
          $ref: '#/responses/500ErrorResponse'
        504:
          $ref: '#/responses/504GatewayTimeout'

  /vm/{id}:
    get:
      operationId: getVM
      tags:
        - cloud
      description: "Finds the virtual machine identified by the given id parameter"
      parameters:
        - $ref: '#/parameters/id'
      responses:
        200:
          description: "OK"
          schema:
            $ref: '#/definitions/VirtualMachine'

  # Function related tasks
  /function:
    get:
      operationId: findFunctions
      tags:
        - cloud
      description: "Finds all functions the user has access to"
      responses:
        200:
          description: "OK"
          schema:
            type: array
            items:
              $ref: '#/definitions/Function'

  /function/{id}:
    get:
      operationId: getFunction
      tags:
        - cloud
      description: "Finds the function identified by the given id parameter"
      parameters:
        - $ref: '#/parameters/id'
      responses:
        200:
          description: "OK"
          schema:
            $ref: '#/definitions/Function'

  # encryption related paths
  /encryption/{text}:
    get:
      consumes: []
      operationId: encrypt
      tags:
        - security
      description: "Encrypts the given string"
      parameters:
        - name: text
          in: path
          description: Text to encrypt
          required: true
          type: string
      responses:
        200:
          description: "OK"
          schema:
            $ref: '#/definitions/Text'

  /decryption/{text}:
    get:
      consumes: []
      operationId: decrypt
      tags:
        - security
      description: "Decrypts the given string"
      parameters:
        - name: text
          in: path
          description: "Text to decrypt"
          required: true
          type: string
      responses:
        200:
          description: "OK"
          schema:
            $ref: '#/definitions/Text'

  # secure store related paths
  /secureStore/{key}:
    get:
      consumes: []
      operationId: retrieveSecure
      tags:
        - security
      description: |
        Retrieves the stored value.
      parameters:
        - name: key
          in: path
          description: |
            Key of the stored variable
          required: true
          type: string
      responses:
        200:
          description: "OK"
          schema:
            $ref: '#/definitions/Text'
    put:
      operationId: storeSecure
      tags:
        - security
      parameters:
        - name: key
          in: path
          description: |
            Key of the stored variable
          required: true
          type: string
        - name: value
          in: body
          description: |
            Value of the stored variable
          required: true
          schema:
            $ref: '#/definitions/Text'
      responses:
        200:
          description: "OK"
          schema:
            $ref: '#/definitions/Text'
    delete:
      operationId: deleteSecure
      tags:
        - security
      parameters:
        - name: key
          in: path
          description: |
            Key of the stored variable
          required: true
          type: string
      responses:
        200:
          description: "OK"


  # Platform related paths:

  # Platform paths:
  /platform:
    get:
      consumes: []
      operationId: findPlatforms
      tags:
        - platform
      description: |
        Returns all platform from the system that the user has access to
      responses:
        200:
          description: |
            All platforms
          schema:
            type: array
            items:
              $ref: '#/definitions/Platform'
        401:
          $ref: '#/responses/401UnauthorizedResponse'
        403:
          $ref: '#/responses/403ForbiddenResponse'
        500:
          $ref: '#/responses/500ErrorResponse'
        504:
          $ref: '#/responses/504GatewayTimeout'
    post:
      operationId: addPlatform
      tags:
        - platform
      description: Creates a new platform.
      parameters:
        - name: platform
          in: body
          description: Platform to add
          required: true
          schema:
            $ref: '#/definitions/NewPlatform'
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Platform"
        400:
          $ref: '#/responses/400BadRequestResponse'
        401:
          $ref: '#/responses/401UnauthorizedResponse'
        403:
          $ref: '#/responses/403ForbiddenResponse'
        404:
          $ref: '#/responses/404NotFoundResponse'
        500:
          $ref: '#/responses/500ErrorResponse'
        504:
          $ref: '#/responses/504GatewayTimeout'

  /platform/{id}:
    get:
      consumes: []
      operationId: findPlatform
      tags:
        - platform
      description: |
        Returns the platform identified by the given id parameter
      parameters:
        - $ref: '#/parameters/id'
      responses:
        200:
          description: |
            The platform identified by the id
          schema:
            $ref: '#/definitions/Platform'
        401:
          $ref: '#/responses/401UnauthorizedResponse'
        403:
          $ref: '#/responses/403ForbiddenResponse'
        500:
          $ref: '#/responses/500ErrorResponse'
        504:
          $ref: '#/responses/504GatewayTimeout'
    delete:
      operationId: deletePlatform
      tags:
        - platform
      description: |
        Deletes the platform identified by the given id paramater.
      parameters:
        - $ref: '#/parameters/id'
      responses:
        200:
          description: "OK"
        400:
          $ref: '#/responses/400BadRequestResponse'
        401:
          $ref: '#/responses/401UnauthorizedResponse'
        403:
          $ref: '#/responses/403ForbiddenResponse'
        404:
          $ref: '#/responses/404NotFoundResponse'
        500:
          $ref: '#/responses/500ErrorResponse'
        504:
          $ref: '#/responses/504GatewayTimeout'

  # PlatformHardware related paths
  /platformHardware:
    get:
      consumes: []
      operationId: findPlatformHardwares
      tags:
        - platform
      description: |
        Returns all platform hardware visible to the user
      responses:
        200:
          description: |
            OK
          schema:
            type: array
            items:
              $ref: '#/definitions/PlatformHardware'
        401:
          $ref: '#/responses/401UnauthorizedResponse'
        403:
          $ref: '#/responses/403ForbiddenResponse'
        500:
          $ref: '#/responses/500ErrorResponse'
        504:
          $ref: '#/responses/504GatewayTimeout'

    post:
      operationId: addPlatformHardware
      tags:
        - platform
      description: |
        Creates a new PlatformHardware
      parameters:
        - name: platformHardware
          in: body
          description: |
            PlatformHardware to be created
          required: true
          schema:
            $ref: '#/definitions/NewPlatformHardware'
      responses:
        200:
          description: |
            OK
          schema:
            $ref: '#/definitions/PlatformHardware'
        400:
          $ref: '#/responses/400BadRequestResponse'
        401:
          $ref: '#/responses/401UnauthorizedResponse'
        403:
          $ref: '#/responses/403ForbiddenResponse'
        404:
          $ref: '#/responses/404NotFoundResponse'
        500:
          $ref: '#/responses/500ErrorResponse'
        504:
          $ref: '#/responses/504GatewayTimeout'

  /platformHardware/{id}:
    get:
      consumes: []
      operationId: findPlatformHardware
      tags:
        - platform
      description: |
        Returns the PlatformHardware identified by the id parameter.
      parameters:
        - $ref: '#/parameters/id'
      responses:
        200:
          description: 'OK'
          schema:
            $ref: '#/definitions/PlatformHardware'
        401:
          $ref: '#/responses/401UnauthorizedResponse'
        403:
          $ref: '#/responses/403ForbiddenResponse'
        500:
          $ref: '#/responses/500ErrorResponse'
        504:
          $ref: '#/responses/504GatewayTimeout'

  # PlatformEnvironment related paths
  /platformEnvironment:
    get:
      consumes: []
      operationId: findPlatformEnvironments
      tags:
        - platform
      description: |
        Returns all platform environment  visible to the user
      responses:
        200:
          description: |
            OK
          schema:
            type: array
            items:
              $ref: '#/definitions/PlatformEnvironment'
        401:
          $ref: '#/responses/401UnauthorizedResponse'
        403:
          $ref: '#/responses/403ForbiddenResponse'
        500:
          $ref: '#/responses/500ErrorResponse'
        504:
          $ref: '#/responses/504GatewayTimeout'
    post:
      operationId: addPlatformEnvironment
      tags:
        - platform
      description: |
        Creates a new PlatformEnvironment
      parameters:
        - name: platformEnvironment
          in: body
          description: |
            PlatformEnvironment to be created
          required: true
          schema:
            $ref: '#/definitions/NewPlatformEnvironment'
      responses:
        200:
          description: |
            OK
          schema:
            $ref: '#/definitions/PlatformEnvironment'
        400:
          $ref: '#/responses/400BadRequestResponse'
        401:
          $ref: '#/responses/401UnauthorizedResponse'
        403:
          $ref: '#/responses/403ForbiddenResponse'
        404:
          $ref: '#/responses/404NotFoundResponse'
        500:
          $ref: '#/responses/500ErrorResponse'
        504:
          $ref: '#/responses/504GatewayTimeout'

  /platformEnvironment/{id}:
    get:
      consumes: []
      operationId: findPlatformEnvironment
      tags:
        - platform
      description: |
        Returns the PlatformEnvironment identified by the id parameter.
      parameters:
        - $ref: '#/parameters/id'
      responses:
        200:
          description: 'OK'
          schema:
            $ref: '#/definitions/PlatformEnvironment'
        401:
          $ref: '#/responses/401UnauthorizedResponse'
        403:
          $ref: '#/responses/403ForbiddenResponse'
        500:
          $ref: '#/responses/500ErrorResponse'
        504:
          $ref: '#/responses/504GatewayTimeout'

  # PlatformRuntime related paths
  /platformRuntime:
    get:
      consumes: []
      operationId: findPlatformRuntimes
      tags:
        - platform
      description: |
        Returns all platform runtime  visible to the user
      responses:
        200:
          description: |
            OK
          schema:
            type: array
            items:
              $ref: '#/definitions/PlatformRuntime'
        401:
          $ref: '#/responses/401UnauthorizedResponse'
        403:
          $ref: '#/responses/403ForbiddenResponse'
        500:
          $ref: '#/responses/500ErrorResponse'
        504:
          $ref: '#/responses/504GatewayTimeout'

    post:
      operationId: addPlatformRuntime
      tags:
        - platform
      description: |
        Creates a new PlatformRuntime
      parameters:
        - name: platformRuntime
          in: body
          description: |
            PlatformRuntime to be created
          required: true
          schema:
            $ref: '#/definitions/NewPlatformRuntime'
      responses:
        200:
          description: |
            OK
          schema:
            $ref: '#/definitions/PlatformRuntime'
        400:
          $ref: '#/responses/400BadRequestResponse'
        401:
          $ref: '#/responses/401UnauthorizedResponse'
        403:
          $ref: '#/responses/403ForbiddenResponse'
        404:
          $ref: '#/responses/404NotFoundResponse'
        500:
          $ref: '#/responses/500ErrorResponse'
        504:
          $ref: '#/responses/504GatewayTimeout'

  /platformRuntime/{id}:
    get:
      consumes: []
      operationId: findPlatformRuntime
      tags:
        - platform
      description: |
        Returns the PlatformRuntime identified by the id parameter.
      parameters:
        - $ref: '#/parameters/id'
      responses:
        200:
          description: 'OK'
          schema:
            $ref: '#/definitions/PlatformRuntime'
        401:
          $ref: '#/responses/401UnauthorizedResponse'
        403:
          $ref: '#/responses/403ForbiddenResponse'
        500:
          $ref: '#/responses/500ErrorResponse'
        504:
          $ref: '#/responses/504GatewayTimeout'

  #YAML related paths
  /yaml:
    post:
      consumes:
        - application/yaml
      tags:
        - yaml
      operationId: parseYAML
      parameters:
        - name: yaml
          in: body
          description: YAML payload
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Job'



  /scale:
    post:
      operationId: triggerScale
      tags:
        - scale
      description: |
        Triggers a new scaling action
      parameters:
        - name: scale
          in: body
          description: |
            Scaling action to be executed
          required: true
          schema:
            $ref: '#/definitions/Scale'
      responses:
        202:
          description: ACCEPTED
          schema:
            $ref: '#/definitions/Queue'          




